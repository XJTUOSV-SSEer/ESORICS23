// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DistSSE.proto
#ifndef GRPC_DistSSE_2eproto__INCLUDED
#define GRPC_DistSSE_2eproto__INCLUDED

#include "DistSSE.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace DistSSE {

class RPC final {
 public:
  static constexpr char const* service_full_name() {
    return "DistSSE.RPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Setup
    virtual ::grpc::Status setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncsetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncsetupRaw(context, request, cq));
    }
    // Search
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>> search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>> search_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>>(search_roseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>> Asyncsearch_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>>(Asyncsearch_roseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>> PrepareAsyncsearch_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>>(PrepareAsyncsearch_roseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply_Rose_2>> search_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply_Rose_2>>(search_Rose_2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>> Asyncsearch_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>>(Asyncsearch_Rose_2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>> PrepareAsyncsearch_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>>(PrepareAsyncsearch_Rose_2Raw(context, request, cq));
    }
    // Update
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    virtual ::grpc::Status update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncupdate_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(Asyncupdate_Rose_2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdate_Rose_2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>> batch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>>(batch_update_roseRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_update_roseRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>> PrepareAsyncbatch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>>(PrepareAsyncbatch_update_roseRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>> batch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>>(batch_update_Rose_2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>> Asyncbatch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>>(Asyncbatch_update_Rose_2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>> PrepareAsyncbatch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>>(PrepareAsyncbatch_update_Rose_2Raw(context, response, cq));
    }
    // only used for experiment simulation
    virtual ::grpc::Status cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>> batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>>(batch_cacheRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>> Asyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>>(Asyncbatch_cacheRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>> PrepareAsyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>>(PrepareAsyncbatch_cacheRaw(context, response, cq));
    }
    // getOMAP
    virtual ::grpc::Status OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::DistSSE::OMAPFindReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>> AsyncOMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>>(AsyncOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>> PrepareAsyncOMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>>(PrepareAsyncOMAPFindRaw(context, request, cq));
    }
    virtual ::grpc::Status OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> AsyncOMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncOMAPInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncOMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncOMAPInsertRaw(context, request, cq));
    }
    virtual ::grpc::Status batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::DistSSE::batchOMAPFindReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>> AsyncbatchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>>(AsyncbatchOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>> PrepareAsyncbatchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>>(PrepareAsyncbatchOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::OMAPInsertMessage>> batchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::OMAPInsertMessage>>(batchOMAPInsertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>> AsyncbatchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>>(AsyncbatchOMAPInsertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>> PrepareAsyncbatchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>>(PrepareAsyncbatchOMAPInsertRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Setup
      virtual void setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search
      virtual void search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) = 0;
      virtual void search_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) = 0;
      virtual void search_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply_Rose_2>* reactor) = 0;
      // Update
      virtual void update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) = 0;
      virtual void batch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) = 0;
      virtual void batch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage_Rose_2>* reactor) = 0;
      // only used for experiment simulation
      virtual void cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::CacheRequestMessage>* reactor) = 0;
      // getOMAP
      virtual void OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void batchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::OMAPInsertMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>* search_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>* Asyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>* PrepareAsyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistSSE::SearchReply_Rose_2>* search_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>* Asyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply_Rose_2>* PrepareAsyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* Asyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>* batch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>* Asyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>* PrepareAsyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>* batch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>* Asyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage_Rose_2>* PrepareAsyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>* batch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>* Asyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>* PrepareAsyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>* AsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::OMAPFindReply>* PrepareAsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>* AsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::batchOMAPFindReply>* PrepareAsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::OMAPInsertMessage>* batchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>* AsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::OMAPInsertMessage>* PrepareAsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncsetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncsetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>> search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>> search_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>>(search_roseRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>> Asyncsearch_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>>(Asyncsearch_roseRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>> PrepareAsyncsearch_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>>(PrepareAsyncsearch_roseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply_Rose_2>> search_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply_Rose_2>>(search_Rose_2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>> Asyncsearch_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>>(Asyncsearch_Rose_2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>> PrepareAsyncsearch_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>>(PrepareAsyncsearch_Rose_2Raw(context, request, cq));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    ::grpc::Status update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncupdate_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(Asyncupdate_Rose_2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdate_Rose_2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>> batch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>>(batch_update_roseRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_update_roseRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>> PrepareAsyncbatch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>>(PrepareAsyncbatch_update_roseRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage_Rose_2>> batch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage_Rose_2>>(batch_update_Rose_2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>> Asyncbatch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>>(Asyncbatch_update_Rose_2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>> PrepareAsyncbatch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>>(PrepareAsyncbatch_update_Rose_2Raw(context, response, cq));
    }
    ::grpc::Status cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>> batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>>(batch_cacheRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>> Asyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>>(Asyncbatch_cacheRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>> PrepareAsyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>>(PrepareAsyncbatch_cacheRaw(context, response, cq));
    }
    ::grpc::Status OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::DistSSE::OMAPFindReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>> AsyncOMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>>(AsyncOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>> PrepareAsyncOMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>>(PrepareAsyncOMAPFindRaw(context, request, cq));
    }
    ::grpc::Status OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> AsyncOMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncOMAPInsertRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncOMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncOMAPInsertRaw(context, request, cq));
    }
    ::grpc::Status batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::DistSSE::batchOMAPFindReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>> AsyncbatchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>>(AsyncbatchOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>> PrepareAsyncbatchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>>(PrepareAsyncbatchOMAPFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::OMAPInsertMessage>> batchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::OMAPInsertMessage>>(batchOMAPInsertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>> AsyncbatchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>>(AsyncbatchOMAPInsertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>> PrepareAsyncbatchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>>(PrepareAsyncbatchOMAPInsertRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) override;
      void search_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) override;
      void search_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply_Rose_2>* reactor) override;
      void update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) override;
      void batch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) override;
      void batch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage_Rose_2>* reactor) override;
      void cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::CacheRequestMessage>* reactor) override;
      void OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, std::function<void(::grpc::Status)>) override;
      void OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, std::function<void(::grpc::Status)>) override;
      void batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::OMAPInsertMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistSSE::SearchReply>* search_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* Asyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* PrepareAsyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistSSE::SearchReply_Rose_2>* search_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>* Asyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>* PrepareAsyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* Asyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>* batch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* Asyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* PrepareAsyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* batch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* Asyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* PrepareAsyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>* batch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>* Asyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>* PrepareAsyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>* AsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>* PrepareAsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>* AsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>* PrepareAsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::OMAPInsertMessage>* batchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>* AsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>* PrepareAsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setup_;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_search_rose_;
    const ::grpc::internal::RpcMethod rpcmethod_search_Rose_2_;
    const ::grpc::internal::RpcMethod rpcmethod_update_;
    const ::grpc::internal::RpcMethod rpcmethod_update_Rose_2_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_update_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_update_rose_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_update_Rose_2_;
    const ::grpc::internal::RpcMethod rpcmethod_cache_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_cache_;
    const ::grpc::internal::RpcMethod rpcmethod_OMAPFind_;
    const ::grpc::internal::RpcMethod rpcmethod_OMAPInsert_;
    const ::grpc::internal::RpcMethod rpcmethod_batchOMAPFind_;
    const ::grpc::internal::RpcMethod rpcmethod_batchOMAPInsert_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Setup
    virtual ::grpc::Status setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    // Search
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer);
    virtual ::grpc::Status search_rose(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer);
    virtual ::grpc::Status search_Rose_2(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* writer);
    // Update
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status update_Rose_2(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update_rose(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* reader, ::DistSSE::ExecuteStatus* response);
    // only used for experiment simulation
    virtual ::grpc::Status cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_cache(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* reader, ::DistSSE::ExecuteStatus* response);
    // getOMAP
    virtual ::grpc::Status OMAPFind(::grpc::ServerContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response);
    virtual ::grpc::Status OMAPInsert(::grpc::ServerContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batchOMAPFind(::grpc::ServerContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response);
    virtual ::grpc::Status batchOMAPInsert(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* reader, ::DistSSE::ExecuteStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsetup(::grpc::ServerContext* context, ::DistSSE::SetupRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::DistSSE::SearchRequestMessage* request, ::grpc::ServerAsyncWriter< ::DistSSE::SearchReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search_rose() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch_rose(::grpc::ServerContext* context, ::DistSSE::SearchRequestMessage* request, ::grpc::ServerAsyncWriter< ::DistSSE::SearchReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch_Rose_2(::grpc::ServerContext* context, ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ServerAsyncWriter< ::DistSSE::SearchReply_Rose_2>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::DistSSE::UpdateRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_Rose_2(::grpc::ServerContext* context, ::DistSSE::UpdateRequestMessage_Rose_2* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_update() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_update_rose() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_batch_update_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_rose(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update_rose(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_update_Rose_2() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_batch_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update_Rose_2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage_Rose_2>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_cache() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcache(::grpc::ServerContext* context, ::DistSSE::CacheRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_cache() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_cache(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::CacheRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(10, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OMAPFind() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOMAPFind(::grpc::ServerContext* context, ::DistSSE::OMAPFindMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::OMAPFindReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOMAPInsert(::grpc::ServerContext* context, ::DistSSE::OMAPInsertMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchOMAPFind(::grpc::ServerContext* context, ::DistSSE::batchOMAPFindMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::batchOMAPFindReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batchOMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batchOMAPInsert() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_batchOMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPInsert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchOMAPInsert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::OMAPInsertMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(14, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setup<WithAsyncMethod_search<WithAsyncMethod_search_rose<WithAsyncMethod_search_Rose_2<WithAsyncMethod_update<WithAsyncMethod_update_Rose_2<WithAsyncMethod_batch_update<WithAsyncMethod_batch_update_rose<WithAsyncMethod_batch_update_Rose_2<WithAsyncMethod_cache<WithAsyncMethod_batch_cache<WithAsyncMethod_OMAPFind<WithAsyncMethod_OMAPInsert<WithAsyncMethod_batchOMAPFind<WithAsyncMethod_batchOMAPInsert<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response) { return this->setup(context, request, response); }));}
    void SetMessageAllocatorFor_setup(
        ::grpc::MessageAllocator< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setup(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::SearchRequestMessage* request) { return this->search(context, request); }));
    }
    ~WithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::DistSSE::SearchReply>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search_rose() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::SearchRequestMessage* request) { return this->search_rose(context, request); }));
    }
    ~WithCallbackMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::DistSSE::SearchReply>* search_rose(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::DistSSE::SearchRequestMessage_Rose_2, ::DistSSE::SearchReply_Rose_2>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request) { return this->search_Rose_2(context, request); }));
    }
    ~WithCallbackMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::DistSSE::SearchReply_Rose_2>* search_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_update() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response) { return this->update(context, request, response); }));}
    void SetMessageAllocatorFor_update(
        ::grpc::MessageAllocator< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response) { return this->update_Rose_2(context, request, response); }));}
    void SetMessageAllocatorFor_update_Rose_2(
        ::grpc::MessageAllocator< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batch_update() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackClientStreamingHandler< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::DistSSE::ExecuteStatus* response) { return this->batch_update(context, response); }));
    }
    ~WithCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::DistSSE::UpdateRequestMessage>* batch_update(
      ::grpc::CallbackServerContext* /*context*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batch_update_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batch_update_rose() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::DistSSE::ExecuteStatus* response) { return this->batch_update_rose(context, response); }));
    }
    ~WithCallbackMethod_batch_update_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_rose(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::DistSSE::UpdateRequestMessage>* batch_update_rose(
      ::grpc::CallbackServerContext* /*context*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batch_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batch_update_Rose_2() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::DistSSE::ExecuteStatus* response) { return this->batch_update_Rose_2(context, response); }));
    }
    ~WithCallbackMethod_batch_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::DistSSE::UpdateRequestMessage_Rose_2>* batch_update_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_cache() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response) { return this->cache(context, request, response); }));}
    void SetMessageAllocatorFor_cache(
        ::grpc::MessageAllocator< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cache(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batch_cache() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackClientStreamingHandler< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::DistSSE::ExecuteStatus* response) { return this->batch_cache(context, response); }));
    }
    ~WithCallbackMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::DistSSE::CacheRequestMessage>* batch_cache(
      ::grpc::CallbackServerContext* /*context*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OMAPFind() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response) { return this->OMAPFind(context, request, response); }));}
    void SetMessageAllocatorFor_OMAPFind(
        ::grpc::MessageAllocator< ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OMAPFind(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response) { return this->OMAPInsert(context, request, response); }));}
    void SetMessageAllocatorFor_OMAPInsert(
        ::grpc::MessageAllocator< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OMAPInsert(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response) { return this->batchOMAPFind(context, request, response); }));}
    void SetMessageAllocatorFor_batchOMAPFind(
        ::grpc::MessageAllocator< ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* batchOMAPFind(
      ::grpc::CallbackServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batchOMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batchOMAPInsert() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackClientStreamingHandler< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::DistSSE::ExecuteStatus* response) { return this->batchOMAPInsert(context, response); }));
    }
    ~WithCallbackMethod_batchOMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPInsert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::DistSSE::OMAPInsertMessage>* batchOMAPInsert(
      ::grpc::CallbackServerContext* /*context*/, ::DistSSE::ExecuteStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setup<WithCallbackMethod_search<WithCallbackMethod_search_rose<WithCallbackMethod_search_Rose_2<WithCallbackMethod_update<WithCallbackMethod_update_Rose_2<WithCallbackMethod_batch_update<WithCallbackMethod_batch_update_rose<WithCallbackMethod_batch_update_Rose_2<WithCallbackMethod_cache<WithCallbackMethod_batch_cache<WithCallbackMethod_OMAPFind<WithCallbackMethod_OMAPInsert<WithCallbackMethod_batchOMAPFind<WithCallbackMethod_batchOMAPInsert<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search_rose() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_update() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_update_rose() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_batch_update_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_rose(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_update_Rose_2() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_batch_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_cache() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_cache() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OMAPFind() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batchOMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batchOMAPInsert() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_batchOMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPInsert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search_rose() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch_rose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch_Rose_2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_Rose_2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_update() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_update_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_update_rose() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_batch_update_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_rose(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update_rose(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_update_Rose_2() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_batch_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update_Rose_2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_cache() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_cache() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_cache(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(10, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OMAPFind() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOMAPFind(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOMAPInsert(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchOMAPFind(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batchOMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batchOMAPInsert() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_batchOMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPInsert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchOMAPInsert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(14, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setup(context, request, response); }));
    }
    ~WithRawCallbackMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->search(context, request); }));
    }
    ~WithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search_rose() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->search_rose(context, request); }));
    }
    ~WithRawCallbackMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* search_rose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->search_Rose_2(context, request); }));
    }
    ~WithRawCallbackMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* search_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_update() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update(context, request, response); }));
    }
    ~WithRawCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update_Rose_2(context, request, response); }));
    }
    ~WithRawCallbackMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batch_update() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batch_update(context, response); }));
    }
    ~WithRawCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batch_update(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batch_update_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batch_update_rose() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batch_update_rose(context, response); }));
    }
    ~WithRawCallbackMethod_batch_update_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_rose(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batch_update_rose(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batch_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batch_update_Rose_2() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batch_update_Rose_2(context, response); }));
    }
    ~WithRawCallbackMethod_batch_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update_Rose_2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batch_update_Rose_2(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_cache() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->cache(context, request, response); }));
    }
    ~WithRawCallbackMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batch_cache() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batch_cache(context, response); }));
    }
    ~WithRawCallbackMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batch_cache(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OMAPFind() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OMAPFind(context, request, response); }));
    }
    ~WithRawCallbackMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OMAPFind(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OMAPInsert(context, request, response); }));
    }
    ~WithRawCallbackMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OMAPInsert(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->batchOMAPFind(context, request, response); }));
    }
    ~WithRawCallbackMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* batchOMAPFind(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batchOMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batchOMAPInsert() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->batchOMAPInsert(context, response); }));
    }
    ~WithRawCallbackMethod_batchOMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchOMAPInsert(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* /*reader*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batchOMAPInsert(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>* streamer) {
                       return this->Streamedsetup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setup(::grpc::ServerContext* /*context*/, const ::DistSSE::SetupRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::SetupRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>* streamer) {
                       return this->Streamedupdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::UpdateRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update_Rose_2() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>* streamer) {
                       return this->Streamedupdate_Rose_2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_update_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::UpdateRequestMessage_Rose_2* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate_Rose_2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::UpdateRequestMessage_Rose_2,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_cache() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>* streamer) {
                       return this->Streamedcache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cache(::grpc::ServerContext* /*context*/, const ::DistSSE::CacheRequestMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::CacheRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OMAPFind() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply>* streamer) {
                       return this->StreamedOMAPFind(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPFindMessage* /*request*/, ::DistSSE::OMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOMAPFind(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::OMAPFindMessage,::DistSSE::OMAPFindReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OMAPInsert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OMAPInsert() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>* streamer) {
                       return this->StreamedOMAPInsert(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OMAPInsert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OMAPInsert(::grpc::ServerContext* /*context*/, const ::DistSSE::OMAPInsertMessage* /*request*/, ::DistSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOMAPInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::OMAPInsertMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_batchOMAPFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_batchOMAPFind() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply>* streamer) {
                       return this->StreamedbatchOMAPFind(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_batchOMAPFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status batchOMAPFind(::grpc::ServerContext* /*context*/, const ::DistSSE::batchOMAPFindMessage* /*request*/, ::DistSSE::batchOMAPFindReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbatchOMAPFind(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::batchOMAPFindMessage,::DistSSE::batchOMAPFindReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setup<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_update_Rose_2<WithStreamedUnaryMethod_cache<WithStreamedUnaryMethod_OMAPFind<WithStreamedUnaryMethod_OMAPInsert<WithStreamedUnaryMethod_batchOMAPFind<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_search() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>* streamer) {
                       return this->Streamedsearch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistSSE::SearchRequestMessage,::DistSSE::SearchReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_search_rose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_search_rose() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>* streamer) {
                       return this->Streamedsearch_rose(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_search_rose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search_rose(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch_rose(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistSSE::SearchRequestMessage,::DistSSE::SearchReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_search_Rose_2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_search_Rose_2() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::DistSSE::SearchRequestMessage_Rose_2, ::DistSSE::SearchReply_Rose_2>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::DistSSE::SearchRequestMessage_Rose_2, ::DistSSE::SearchReply_Rose_2>* streamer) {
                       return this->Streamedsearch_Rose_2(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_search_Rose_2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search_Rose_2(::grpc::ServerContext* /*context*/, const ::DistSSE::SearchRequestMessage_Rose_2* /*request*/, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch_Rose_2(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistSSE::SearchRequestMessage_Rose_2,::DistSSE::SearchReply_Rose_2>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_search<WithSplitStreamingMethod_search_rose<WithSplitStreamingMethod_search_Rose_2<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_setup<WithSplitStreamingMethod_search<WithSplitStreamingMethod_search_rose<WithSplitStreamingMethod_search_Rose_2<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_update_Rose_2<WithStreamedUnaryMethod_cache<WithStreamedUnaryMethod_OMAPFind<WithStreamedUnaryMethod_OMAPInsert<WithStreamedUnaryMethod_batchOMAPFind<Service > > > > > > > > > > StreamedService;
};

}  // namespace DistSSE


#endif  // GRPC_DistSSE_2eproto__INCLUDED
