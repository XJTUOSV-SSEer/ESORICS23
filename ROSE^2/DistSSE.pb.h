// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistSSE.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DistSSE_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DistSSE_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DistSSE_2eproto;
namespace DistSSE {
class CacheRequestMessage;
struct CacheRequestMessageDefaultTypeInternal;
extern CacheRequestMessageDefaultTypeInternal _CacheRequestMessage_default_instance_;
class ExecuteStatus;
struct ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class OMAPFindMessage;
struct OMAPFindMessageDefaultTypeInternal;
extern OMAPFindMessageDefaultTypeInternal _OMAPFindMessage_default_instance_;
class OMAPFindReply;
struct OMAPFindReplyDefaultTypeInternal;
extern OMAPFindReplyDefaultTypeInternal _OMAPFindReply_default_instance_;
class OMAPInsertMessage;
struct OMAPInsertMessageDefaultTypeInternal;
extern OMAPInsertMessageDefaultTypeInternal _OMAPInsertMessage_default_instance_;
class SearchReply;
struct SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchReply_Rose_2;
struct SearchReply_Rose_2DefaultTypeInternal;
extern SearchReply_Rose_2DefaultTypeInternal _SearchReply_Rose_2_default_instance_;
class SearchRequestMessage;
struct SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class SearchRequestMessage_Rose_2;
struct SearchRequestMessage_Rose_2DefaultTypeInternal;
extern SearchRequestMessage_Rose_2DefaultTypeInternal _SearchRequestMessage_Rose_2_default_instance_;
class SetupRequestMessage;
struct SetupRequestMessageDefaultTypeInternal;
extern SetupRequestMessageDefaultTypeInternal _SetupRequestMessage_default_instance_;
class UpdateRequestMessage;
struct UpdateRequestMessageDefaultTypeInternal;
extern UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
class UpdateRequestMessage_Rose_2;
struct UpdateRequestMessage_Rose_2DefaultTypeInternal;
extern UpdateRequestMessage_Rose_2DefaultTypeInternal _UpdateRequestMessage_Rose_2_default_instance_;
class batchOMAPFindMessage;
struct batchOMAPFindMessageDefaultTypeInternal;
extern batchOMAPFindMessageDefaultTypeInternal _batchOMAPFindMessage_default_instance_;
class batchOMAPFindReply;
struct batchOMAPFindReplyDefaultTypeInternal;
extern batchOMAPFindReplyDefaultTypeInternal _batchOMAPFindReply_default_instance_;
}  // namespace DistSSE
PROTOBUF_NAMESPACE_OPEN
template<> ::DistSSE::CacheRequestMessage* Arena::CreateMaybeMessage<::DistSSE::CacheRequestMessage>(Arena*);
template<> ::DistSSE::ExecuteStatus* Arena::CreateMaybeMessage<::DistSSE::ExecuteStatus>(Arena*);
template<> ::DistSSE::OMAPFindMessage* Arena::CreateMaybeMessage<::DistSSE::OMAPFindMessage>(Arena*);
template<> ::DistSSE::OMAPFindReply* Arena::CreateMaybeMessage<::DistSSE::OMAPFindReply>(Arena*);
template<> ::DistSSE::OMAPInsertMessage* Arena::CreateMaybeMessage<::DistSSE::OMAPInsertMessage>(Arena*);
template<> ::DistSSE::SearchReply* Arena::CreateMaybeMessage<::DistSSE::SearchReply>(Arena*);
template<> ::DistSSE::SearchReply_Rose_2* Arena::CreateMaybeMessage<::DistSSE::SearchReply_Rose_2>(Arena*);
template<> ::DistSSE::SearchRequestMessage* Arena::CreateMaybeMessage<::DistSSE::SearchRequestMessage>(Arena*);
template<> ::DistSSE::SearchRequestMessage_Rose_2* Arena::CreateMaybeMessage<::DistSSE::SearchRequestMessage_Rose_2>(Arena*);
template<> ::DistSSE::SetupRequestMessage* Arena::CreateMaybeMessage<::DistSSE::SetupRequestMessage>(Arena*);
template<> ::DistSSE::UpdateRequestMessage* Arena::CreateMaybeMessage<::DistSSE::UpdateRequestMessage>(Arena*);
template<> ::DistSSE::UpdateRequestMessage_Rose_2* Arena::CreateMaybeMessage<::DistSSE::UpdateRequestMessage_Rose_2>(Arena*);
template<> ::DistSSE::batchOMAPFindMessage* Arena::CreateMaybeMessage<::DistSSE::batchOMAPFindMessage>(Arena*);
template<> ::DistSSE::batchOMAPFindReply* Arena::CreateMaybeMessage<::DistSSE::batchOMAPFindReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DistSSE {

// ===================================================================

class batchOMAPFindMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.batchOMAPFindMessage) */ {
 public:
  inline batchOMAPFindMessage() : batchOMAPFindMessage(nullptr) {}
  ~batchOMAPFindMessage() override;
  explicit constexpr batchOMAPFindMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  batchOMAPFindMessage(const batchOMAPFindMessage& from);
  batchOMAPFindMessage(batchOMAPFindMessage&& from) noexcept
    : batchOMAPFindMessage() {
    *this = ::std::move(from);
  }

  inline batchOMAPFindMessage& operator=(const batchOMAPFindMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline batchOMAPFindMessage& operator=(batchOMAPFindMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const batchOMAPFindMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const batchOMAPFindMessage* internal_default_instance() {
    return reinterpret_cast<const batchOMAPFindMessage*>(
               &_batchOMAPFindMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(batchOMAPFindMessage& a, batchOMAPFindMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(batchOMAPFindMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(batchOMAPFindMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  batchOMAPFindMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<batchOMAPFindMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const batchOMAPFindMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const batchOMAPFindMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(batchOMAPFindMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.batchOMAPFindMessage";
  }
  protected:
  explicit batchOMAPFindMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdornFieldNumber = 2,
    kWFieldNumber = 1,
    kFlagFieldNumber = 3,
  };
  // repeated bytes idorn = 2;
  int idorn_size() const;
  private:
  int _internal_idorn_size() const;
  public:
  void clear_idorn();
  const std::string& idorn(int index) const;
  std::string* mutable_idorn(int index);
  void set_idorn(int index, const std::string& value);
  void set_idorn(int index, std::string&& value);
  void set_idorn(int index, const char* value);
  void set_idorn(int index, const void* value, size_t size);
  std::string* add_idorn();
  void add_idorn(const std::string& value);
  void add_idorn(std::string&& value);
  void add_idorn(const char* value);
  void add_idorn(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& idorn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_idorn();
  private:
  const std::string& _internal_idorn(int index) const;
  std::string* _internal_add_idorn();
  public:

  // bytes w = 1;
  void clear_w();
  const std::string& w() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_w(ArgT0&& arg0, ArgT... args);
  std::string* mutable_w();
  PROTOBUF_NODISCARD std::string* release_w();
  void set_allocated_w(std::string* w);
  private:
  const std::string& _internal_w() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_w(const std::string& value);
  std::string* _internal_mutable_w();
  public:

  // uint32 flag = 3;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.batchOMAPFindMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> idorn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr w_;
  uint32_t flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class batchOMAPFindReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.batchOMAPFindReply) */ {
 public:
  inline batchOMAPFindReply() : batchOMAPFindReply(nullptr) {}
  ~batchOMAPFindReply() override;
  explicit constexpr batchOMAPFindReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  batchOMAPFindReply(const batchOMAPFindReply& from);
  batchOMAPFindReply(batchOMAPFindReply&& from) noexcept
    : batchOMAPFindReply() {
    *this = ::std::move(from);
  }

  inline batchOMAPFindReply& operator=(const batchOMAPFindReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline batchOMAPFindReply& operator=(batchOMAPFindReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const batchOMAPFindReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const batchOMAPFindReply* internal_default_instance() {
    return reinterpret_cast<const batchOMAPFindReply*>(
               &_batchOMAPFindReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(batchOMAPFindReply& a, batchOMAPFindReply& b) {
    a.Swap(&b);
  }
  inline void Swap(batchOMAPFindReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(batchOMAPFindReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  batchOMAPFindReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<batchOMAPFindReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const batchOMAPFindReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const batchOMAPFindReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(batchOMAPFindReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.batchOMAPFindReply";
  }
  protected:
  explicit batchOMAPFindReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bytes value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const void* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.batchOMAPFindReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class OMAPFindMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.OMAPFindMessage) */ {
 public:
  inline OMAPFindMessage() : OMAPFindMessage(nullptr) {}
  ~OMAPFindMessage() override;
  explicit constexpr OMAPFindMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OMAPFindMessage(const OMAPFindMessage& from);
  OMAPFindMessage(OMAPFindMessage&& from) noexcept
    : OMAPFindMessage() {
    *this = ::std::move(from);
  }

  inline OMAPFindMessage& operator=(const OMAPFindMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OMAPFindMessage& operator=(OMAPFindMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OMAPFindMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OMAPFindMessage* internal_default_instance() {
    return reinterpret_cast<const OMAPFindMessage*>(
               &_OMAPFindMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OMAPFindMessage& a, OMAPFindMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OMAPFindMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OMAPFindMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OMAPFindMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OMAPFindMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OMAPFindMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OMAPFindMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OMAPFindMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.OMAPFindMessage";
  }
  protected:
  explicit OMAPFindMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kIdornFieldNumber = 2,
    kFlagFieldNumber = 3,
  };
  // bytes w = 1;
  void clear_w();
  const std::string& w() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_w(ArgT0&& arg0, ArgT... args);
  std::string* mutable_w();
  PROTOBUF_NODISCARD std::string* release_w();
  void set_allocated_w(std::string* w);
  private:
  const std::string& _internal_w() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_w(const std::string& value);
  std::string* _internal_mutable_w();
  public:

  // bytes idorn = 2;
  void clear_idorn();
  const std::string& idorn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idorn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idorn();
  PROTOBUF_NODISCARD std::string* release_idorn();
  void set_allocated_idorn(std::string* idorn);
  private:
  const std::string& _internal_idorn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idorn(const std::string& value);
  std::string* _internal_mutable_idorn();
  public:

  // uint32 flag = 3;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.OMAPFindMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr w_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idorn_;
  uint32_t flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class OMAPFindReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.OMAPFindReply) */ {
 public:
  inline OMAPFindReply() : OMAPFindReply(nullptr) {}
  ~OMAPFindReply() override;
  explicit constexpr OMAPFindReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OMAPFindReply(const OMAPFindReply& from);
  OMAPFindReply(OMAPFindReply&& from) noexcept
    : OMAPFindReply() {
    *this = ::std::move(from);
  }

  inline OMAPFindReply& operator=(const OMAPFindReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OMAPFindReply& operator=(OMAPFindReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OMAPFindReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OMAPFindReply* internal_default_instance() {
    return reinterpret_cast<const OMAPFindReply*>(
               &_OMAPFindReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OMAPFindReply& a, OMAPFindReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OMAPFindReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OMAPFindReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OMAPFindReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OMAPFindReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OMAPFindReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OMAPFindReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OMAPFindReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.OMAPFindReply";
  }
  protected:
  explicit OMAPFindReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.OMAPFindReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class OMAPInsertMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.OMAPInsertMessage) */ {
 public:
  inline OMAPInsertMessage() : OMAPInsertMessage(nullptr) {}
  ~OMAPInsertMessage() override;
  explicit constexpr OMAPInsertMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OMAPInsertMessage(const OMAPInsertMessage& from);
  OMAPInsertMessage(OMAPInsertMessage&& from) noexcept
    : OMAPInsertMessage() {
    *this = ::std::move(from);
  }

  inline OMAPInsertMessage& operator=(const OMAPInsertMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OMAPInsertMessage& operator=(OMAPInsertMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OMAPInsertMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OMAPInsertMessage* internal_default_instance() {
    return reinterpret_cast<const OMAPInsertMessage*>(
               &_OMAPInsertMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OMAPInsertMessage& a, OMAPInsertMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OMAPInsertMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OMAPInsertMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OMAPInsertMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OMAPInsertMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OMAPInsertMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OMAPInsertMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OMAPInsertMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.OMAPInsertMessage";
  }
  protected:
  explicit OMAPInsertMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kIdornFieldNumber = 2,
    kValueFieldNumber = 4,
    kFlagFieldNumber = 3,
  };
  // bytes w = 1;
  void clear_w();
  const std::string& w() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_w(ArgT0&& arg0, ArgT... args);
  std::string* mutable_w();
  PROTOBUF_NODISCARD std::string* release_w();
  void set_allocated_w(std::string* w);
  private:
  const std::string& _internal_w() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_w(const std::string& value);
  std::string* _internal_mutable_w();
  public:

  // bytes idorn = 2;
  void clear_idorn();
  const std::string& idorn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idorn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idorn();
  PROTOBUF_NODISCARD std::string* release_idorn();
  void set_allocated_idorn(std::string* idorn);
  private:
  const std::string& _internal_idorn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idorn(const std::string& value);
  std::string* _internal_mutable_idorn();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 flag = 3;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.OMAPInsertMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr w_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idorn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  uint32_t flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequestMessage_Rose_2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.UpdateRequestMessage_Rose_2) */ {
 public:
  inline UpdateRequestMessage_Rose_2() : UpdateRequestMessage_Rose_2(nullptr) {}
  ~UpdateRequestMessage_Rose_2() override;
  explicit constexpr UpdateRequestMessage_Rose_2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequestMessage_Rose_2(const UpdateRequestMessage_Rose_2& from);
  UpdateRequestMessage_Rose_2(UpdateRequestMessage_Rose_2&& from) noexcept
    : UpdateRequestMessage_Rose_2() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage_Rose_2& operator=(const UpdateRequestMessage_Rose_2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequestMessage_Rose_2& operator=(UpdateRequestMessage_Rose_2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequestMessage_Rose_2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequestMessage_Rose_2* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage_Rose_2*>(
               &_UpdateRequestMessage_Rose_2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateRequestMessage_Rose_2& a, UpdateRequestMessage_Rose_2& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequestMessage_Rose_2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequestMessage_Rose_2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequestMessage_Rose_2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequestMessage_Rose_2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequestMessage_Rose_2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRequestMessage_Rose_2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequestMessage_Rose_2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.UpdateRequestMessage_Rose_2";
  }
  protected:
  explicit UpdateRequestMessage_Rose_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kCFieldNumber = 2,
  };
  // bytes L = 1;
  void clear_l();
  const std::string& l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l();
  PROTOBUF_NODISCARD std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes C = 2;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.UpdateRequestMessage_Rose_2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage_Rose_2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchRequestMessage_Rose_2) */ {
 public:
  inline SearchRequestMessage_Rose_2() : SearchRequestMessage_Rose_2(nullptr) {}
  ~SearchRequestMessage_Rose_2() override;
  explicit constexpr SearchRequestMessage_Rose_2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequestMessage_Rose_2(const SearchRequestMessage_Rose_2& from);
  SearchRequestMessage_Rose_2(SearchRequestMessage_Rose_2&& from) noexcept
    : SearchRequestMessage_Rose_2() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage_Rose_2& operator=(const SearchRequestMessage_Rose_2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage_Rose_2& operator=(SearchRequestMessage_Rose_2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequestMessage_Rose_2& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequestMessage_Rose_2* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage_Rose_2*>(
               &_SearchRequestMessage_Rose_2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchRequestMessage_Rose_2& a, SearchRequestMessage_Rose_2& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage_Rose_2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequestMessage_Rose_2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequestMessage_Rose_2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequestMessage_Rose_2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequestMessage_Rose_2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequestMessage_Rose_2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage_Rose_2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchRequestMessage_Rose_2";
  }
  protected:
  explicit SearchRequestMessage_Rose_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKUFieldNumber = 1,
    kDeltaKFieldNumber = 2,
    kTkFieldNumber = 3,
    kSnFieldNumber = 4,
    kCntDFieldNumber = 5,
    kCntIFieldNumber = 6,
  };
  // bytes K_u = 1;
  void clear_k_u();
  const std::string& k_u() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_k_u(ArgT0&& arg0, ArgT... args);
  std::string* mutable_k_u();
  PROTOBUF_NODISCARD std::string* release_k_u();
  void set_allocated_k_u(std::string* k_u);
  private:
  const std::string& _internal_k_u() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_k_u(const std::string& value);
  std::string* _internal_mutable_k_u();
  public:

  // bytes delta_k = 2;
  void clear_delta_k();
  const std::string& delta_k() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delta_k(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delta_k();
  PROTOBUF_NODISCARD std::string* release_delta_k();
  void set_allocated_delta_k(std::string* delta_k);
  private:
  const std::string& _internal_delta_k() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta_k(const std::string& value);
  std::string* _internal_mutable_delta_k();
  public:

  // bytes tk = 3;
  void clear_tk();
  const std::string& tk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tk();
  PROTOBUF_NODISCARD std::string* release_tk();
  void set_allocated_tk(std::string* tk);
  private:
  const std::string& _internal_tk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tk(const std::string& value);
  std::string* _internal_mutable_tk();
  public:

  // uint32 sn = 4;
  void clear_sn();
  uint32_t sn() const;
  void set_sn(uint32_t value);
  private:
  uint32_t _internal_sn() const;
  void _internal_set_sn(uint32_t value);
  public:

  // uint32 cnt_d = 5;
  void clear_cnt_d();
  uint32_t cnt_d() const;
  void set_cnt_d(uint32_t value);
  private:
  uint32_t _internal_cnt_d() const;
  void _internal_set_cnt_d(uint32_t value);
  public:

  // uint32 cnt_i = 6;
  void clear_cnt_i();
  uint32_t cnt_i() const;
  void set_cnt_i(uint32_t value);
  private:
  uint32_t _internal_cnt_i() const;
  void _internal_set_cnt_i(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchRequestMessage_Rose_2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_u_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tk_;
  uint32_t sn_;
  uint32_t cnt_d_;
  uint32_t cnt_i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchReply_Rose_2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchReply_Rose_2) */ {
 public:
  inline SearchReply_Rose_2() : SearchReply_Rose_2(nullptr) {}
  ~SearchReply_Rose_2() override;
  explicit constexpr SearchReply_Rose_2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply_Rose_2(const SearchReply_Rose_2& from);
  SearchReply_Rose_2(SearchReply_Rose_2&& from) noexcept
    : SearchReply_Rose_2() {
    *this = ::std::move(from);
  }

  inline SearchReply_Rose_2& operator=(const SearchReply_Rose_2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply_Rose_2& operator=(SearchReply_Rose_2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply_Rose_2& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply_Rose_2* internal_default_instance() {
    return reinterpret_cast<const SearchReply_Rose_2*>(
               &_SearchReply_Rose_2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SearchReply_Rose_2& a, SearchReply_Rose_2& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply_Rose_2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply_Rose_2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply_Rose_2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply_Rose_2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply_Rose_2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchReply_Rose_2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply_Rose_2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchReply_Rose_2";
  }
  protected:
  explicit SearchReply_Rose_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
  };
  // bytes C = 1;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchReply_Rose_2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SetupRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SetupRequestMessage) */ {
 public:
  inline SetupRequestMessage() : SetupRequestMessage(nullptr) {}
  ~SetupRequestMessage() override;
  explicit constexpr SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupRequestMessage(const SetupRequestMessage& from);
  SetupRequestMessage(SetupRequestMessage&& from) noexcept
    : SetupRequestMessage() {
    *this = ::std::move(from);
  }

  inline SetupRequestMessage& operator=(const SetupRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequestMessage& operator=(SetupRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SetupRequestMessage*>(
               &_SetupRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetupRequestMessage& a, SetupRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetupRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SetupRequestMessage";
  }
  protected:
  explicit SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetupSizeFieldNumber = 1,
  };
  // uint64 setup_size = 1;
  void clear_setup_size();
  uint64_t setup_size() const;
  void set_setup_size(uint64_t value);
  private:
  uint64_t _internal_setup_size() const;
  void _internal_set_setup_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SetupRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t setup_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchRequestMessage) */ {
 public:
  inline SearchRequestMessage() : SearchRequestMessage(nullptr) {}
  ~SearchRequestMessage() override;
  explicit constexpr SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchRequestMessage";
  }
  protected:
  explicit SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTpdLFieldNumber = 1,
    kTpdTFieldNumber = 2,
    kLFieldNumber = 3,
    kRFieldNumber = 4,
    kDFieldNumber = 5,
    kCFieldNumber = 6,
  };
  // bytes tpd_L = 1;
  void clear_tpd_l();
  const std::string& tpd_l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tpd_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tpd_l();
  PROTOBUF_NODISCARD std::string* release_tpd_l();
  void set_allocated_tpd_l(std::string* tpd_l);
  private:
  const std::string& _internal_tpd_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tpd_l(const std::string& value);
  std::string* _internal_mutable_tpd_l();
  public:

  // bytes tpd_T = 2;
  void clear_tpd_t();
  const std::string& tpd_t() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tpd_t(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tpd_t();
  PROTOBUF_NODISCARD std::string* release_tpd_t();
  void set_allocated_tpd_t(std::string* tpd_t);
  private:
  const std::string& _internal_tpd_t() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tpd_t(const std::string& value);
  std::string* _internal_mutable_tpd_t();
  public:

  // bytes L = 3;
  void clear_l();
  const std::string& l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l();
  PROTOBUF_NODISCARD std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes R = 4;
  void clear_r();
  const std::string& r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r();
  PROTOBUF_NODISCARD std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes D = 5;
  void clear_d();
  const std::string& d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d();
  PROTOBUF_NODISCARD std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // bytes C = 6;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tpd_l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tpd_t_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchReply) */ {
 public:
  inline SearchReply() : SearchReply(nullptr) {}
  ~SearchReply() override;
  explicit constexpr SearchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchReply";
  }
  protected:
  explicit SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndFieldNumber = 1,
  };
  // bytes ind = 1;
  void clear_ind();
  const std::string& ind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ind();
  PROTOBUF_NODISCARD std::string* release_ind();
  void set_allocated_ind(std::string* ind);
  private:
  const std::string& _internal_ind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ind(const std::string& value);
  std::string* _internal_mutable_ind();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class CacheRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.CacheRequestMessage) */ {
 public:
  inline CacheRequestMessage() : CacheRequestMessage(nullptr) {}
  ~CacheRequestMessage() override;
  explicit constexpr CacheRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheRequestMessage(const CacheRequestMessage& from);
  CacheRequestMessage(CacheRequestMessage&& from) noexcept
    : CacheRequestMessage() {
    *this = ::std::move(from);
  }

  inline CacheRequestMessage& operator=(const CacheRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheRequestMessage& operator=(CacheRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CacheRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheRequestMessage* internal_default_instance() {
    return reinterpret_cast<const CacheRequestMessage*>(
               &_CacheRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CacheRequestMessage& a, CacheRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CacheRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CacheRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.CacheRequestMessage";
  }
  protected:
  explicit CacheRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTwFieldNumber = 1,
    kIndsFieldNumber = 2,
  };
  // bytes tw = 1;
  void clear_tw();
  const std::string& tw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tw();
  PROTOBUF_NODISCARD std::string* release_tw();
  void set_allocated_tw(std::string* tw);
  private:
  const std::string& _internal_tw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tw(const std::string& value);
  std::string* _internal_mutable_tw();
  public:

  // bytes inds = 2;
  void clear_inds();
  const std::string& inds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inds();
  PROTOBUF_NODISCARD std::string* release_inds();
  void set_allocated_inds(std::string* inds);
  private:
  const std::string& _internal_inds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inds(const std::string& value);
  std::string* _internal_mutable_inds();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.CacheRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.UpdateRequestMessage) */ {
 public:
  inline UpdateRequestMessage() : UpdateRequestMessage(nullptr) {}
  ~UpdateRequestMessage() override;
  explicit constexpr UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequestMessage(const UpdateRequestMessage& from);
  UpdateRequestMessage(UpdateRequestMessage&& from) noexcept
    : UpdateRequestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage& operator=(const UpdateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequestMessage& operator=(UpdateRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage*>(
               &_UpdateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateRequestMessage& a, UpdateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.UpdateRequestMessage";
  }
  protected:
  explicit UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kRFieldNumber = 2,
    kDFieldNumber = 3,
    kCFieldNumber = 4,
  };
  // bytes L = 1;
  void clear_l();
  const std::string& l() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l();
  PROTOBUF_NODISCARD std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes R = 2;
  void clear_r();
  const std::string& r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r();
  PROTOBUF_NODISCARD std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes D = 3;
  void clear_d();
  const std::string& d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d();
  PROTOBUF_NODISCARD std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // bytes C = 4;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.UpdateRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.ExecuteStatus) */ {
 public:
  inline ExecuteStatus() : ExecuteStatus(nullptr) {}
  ~ExecuteStatus() override;
  explicit constexpr ExecuteStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteStatus(const ExecuteStatus& from);
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.ExecuteStatus";
  }
  protected:
  explicit ExecuteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.ExecuteStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// batchOMAPFindMessage

// bytes w = 1;
inline void batchOMAPFindMessage::clear_w() {
  w_.ClearToEmpty();
}
inline const std::string& batchOMAPFindMessage::w() const {
  // @@protoc_insertion_point(field_get:DistSSE.batchOMAPFindMessage.w)
  return _internal_w();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void batchOMAPFindMessage::set_w(ArgT0&& arg0, ArgT... args) {
 
 w_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindMessage.w)
}
inline std::string* batchOMAPFindMessage::mutable_w() {
  std::string* _s = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:DistSSE.batchOMAPFindMessage.w)
  return _s;
}
inline const std::string& batchOMAPFindMessage::_internal_w() const {
  return w_.Get();
}
inline void batchOMAPFindMessage::_internal_set_w(const std::string& value) {
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* batchOMAPFindMessage::_internal_mutable_w() {
  
  return w_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* batchOMAPFindMessage::release_w() {
  // @@protoc_insertion_point(field_release:DistSSE.batchOMAPFindMessage.w)
  return w_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void batchOMAPFindMessage::set_allocated_w(std::string* w) {
  if (w != nullptr) {
    
  } else {
    
  }
  w_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), w,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (w_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    w_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.batchOMAPFindMessage.w)
}

// repeated bytes idorn = 2;
inline int batchOMAPFindMessage::_internal_idorn_size() const {
  return idorn_.size();
}
inline int batchOMAPFindMessage::idorn_size() const {
  return _internal_idorn_size();
}
inline void batchOMAPFindMessage::clear_idorn() {
  idorn_.Clear();
}
inline std::string* batchOMAPFindMessage::add_idorn() {
  std::string* _s = _internal_add_idorn();
  // @@protoc_insertion_point(field_add_mutable:DistSSE.batchOMAPFindMessage.idorn)
  return _s;
}
inline const std::string& batchOMAPFindMessage::_internal_idorn(int index) const {
  return idorn_.Get(index);
}
inline const std::string& batchOMAPFindMessage::idorn(int index) const {
  // @@protoc_insertion_point(field_get:DistSSE.batchOMAPFindMessage.idorn)
  return _internal_idorn(index);
}
inline std::string* batchOMAPFindMessage::mutable_idorn(int index) {
  // @@protoc_insertion_point(field_mutable:DistSSE.batchOMAPFindMessage.idorn)
  return idorn_.Mutable(index);
}
inline void batchOMAPFindMessage::set_idorn(int index, const std::string& value) {
  idorn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::set_idorn(int index, std::string&& value) {
  idorn_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::set_idorn(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  idorn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::set_idorn(int index, const void* value, size_t size) {
  idorn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DistSSE.batchOMAPFindMessage.idorn)
}
inline std::string* batchOMAPFindMessage::_internal_add_idorn() {
  return idorn_.Add();
}
inline void batchOMAPFindMessage::add_idorn(const std::string& value) {
  idorn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::add_idorn(std::string&& value) {
  idorn_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::add_idorn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  idorn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DistSSE.batchOMAPFindMessage.idorn)
}
inline void batchOMAPFindMessage::add_idorn(const void* value, size_t size) {
  idorn_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DistSSE.batchOMAPFindMessage.idorn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
batchOMAPFindMessage::idorn() const {
  // @@protoc_insertion_point(field_list:DistSSE.batchOMAPFindMessage.idorn)
  return idorn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
batchOMAPFindMessage::mutable_idorn() {
  // @@protoc_insertion_point(field_mutable_list:DistSSE.batchOMAPFindMessage.idorn)
  return &idorn_;
}

// uint32 flag = 3;
inline void batchOMAPFindMessage::clear_flag() {
  flag_ = 0u;
}
inline uint32_t batchOMAPFindMessage::_internal_flag() const {
  return flag_;
}
inline uint32_t batchOMAPFindMessage::flag() const {
  // @@protoc_insertion_point(field_get:DistSSE.batchOMAPFindMessage.flag)
  return _internal_flag();
}
inline void batchOMAPFindMessage::_internal_set_flag(uint32_t value) {
  
  flag_ = value;
}
inline void batchOMAPFindMessage::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindMessage.flag)
}

// -------------------------------------------------------------------

// batchOMAPFindReply

// repeated bytes value = 1;
inline int batchOMAPFindReply::_internal_value_size() const {
  return value_.size();
}
inline int batchOMAPFindReply::value_size() const {
  return _internal_value_size();
}
inline void batchOMAPFindReply::clear_value() {
  value_.Clear();
}
inline std::string* batchOMAPFindReply::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:DistSSE.batchOMAPFindReply.value)
  return _s;
}
inline const std::string& batchOMAPFindReply::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& batchOMAPFindReply::value(int index) const {
  // @@protoc_insertion_point(field_get:DistSSE.batchOMAPFindReply.value)
  return _internal_value(index);
}
inline std::string* batchOMAPFindReply::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:DistSSE.batchOMAPFindReply.value)
  return value_.Mutable(index);
}
inline void batchOMAPFindReply::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DistSSE.batchOMAPFindReply.value)
}
inline std::string* batchOMAPFindReply::_internal_add_value() {
  return value_.Add();
}
inline void batchOMAPFindReply::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DistSSE.batchOMAPFindReply.value)
}
inline void batchOMAPFindReply::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DistSSE.batchOMAPFindReply.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
batchOMAPFindReply::value() const {
  // @@protoc_insertion_point(field_list:DistSSE.batchOMAPFindReply.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
batchOMAPFindReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:DistSSE.batchOMAPFindReply.value)
  return &value_;
}

// -------------------------------------------------------------------

// OMAPFindMessage

// bytes w = 1;
inline void OMAPFindMessage::clear_w() {
  w_.ClearToEmpty();
}
inline const std::string& OMAPFindMessage::w() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPFindMessage.w)
  return _internal_w();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPFindMessage::set_w(ArgT0&& arg0, ArgT... args) {
 
 w_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPFindMessage.w)
}
inline std::string* OMAPFindMessage::mutable_w() {
  std::string* _s = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPFindMessage.w)
  return _s;
}
inline const std::string& OMAPFindMessage::_internal_w() const {
  return w_.Get();
}
inline void OMAPFindMessage::_internal_set_w(const std::string& value) {
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPFindMessage::_internal_mutable_w() {
  
  return w_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPFindMessage::release_w() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPFindMessage.w)
  return w_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPFindMessage::set_allocated_w(std::string* w) {
  if (w != nullptr) {
    
  } else {
    
  }
  w_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), w,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (w_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    w_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPFindMessage.w)
}

// bytes idorn = 2;
inline void OMAPFindMessage::clear_idorn() {
  idorn_.ClearToEmpty();
}
inline const std::string& OMAPFindMessage::idorn() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPFindMessage.idorn)
  return _internal_idorn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPFindMessage::set_idorn(ArgT0&& arg0, ArgT... args) {
 
 idorn_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPFindMessage.idorn)
}
inline std::string* OMAPFindMessage::mutable_idorn() {
  std::string* _s = _internal_mutable_idorn();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPFindMessage.idorn)
  return _s;
}
inline const std::string& OMAPFindMessage::_internal_idorn() const {
  return idorn_.Get();
}
inline void OMAPFindMessage::_internal_set_idorn(const std::string& value) {
  
  idorn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPFindMessage::_internal_mutable_idorn() {
  
  return idorn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPFindMessage::release_idorn() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPFindMessage.idorn)
  return idorn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPFindMessage::set_allocated_idorn(std::string* idorn) {
  if (idorn != nullptr) {
    
  } else {
    
  }
  idorn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idorn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (idorn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    idorn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPFindMessage.idorn)
}

// uint32 flag = 3;
inline void OMAPFindMessage::clear_flag() {
  flag_ = 0u;
}
inline uint32_t OMAPFindMessage::_internal_flag() const {
  return flag_;
}
inline uint32_t OMAPFindMessage::flag() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPFindMessage.flag)
  return _internal_flag();
}
inline void OMAPFindMessage::_internal_set_flag(uint32_t value) {
  
  flag_ = value;
}
inline void OMAPFindMessage::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:DistSSE.OMAPFindMessage.flag)
}

// -------------------------------------------------------------------

// OMAPFindReply

// bytes value = 1;
inline void OMAPFindReply::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& OMAPFindReply::value() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPFindReply.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPFindReply::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPFindReply.value)
}
inline std::string* OMAPFindReply::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPFindReply.value)
  return _s;
}
inline const std::string& OMAPFindReply::_internal_value() const {
  return value_.Get();
}
inline void OMAPFindReply::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPFindReply::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPFindReply::release_value() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPFindReply.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPFindReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPFindReply.value)
}

// -------------------------------------------------------------------

// OMAPInsertMessage

// bytes w = 1;
inline void OMAPInsertMessage::clear_w() {
  w_.ClearToEmpty();
}
inline const std::string& OMAPInsertMessage::w() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPInsertMessage.w)
  return _internal_w();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPInsertMessage::set_w(ArgT0&& arg0, ArgT... args) {
 
 w_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPInsertMessage.w)
}
inline std::string* OMAPInsertMessage::mutable_w() {
  std::string* _s = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPInsertMessage.w)
  return _s;
}
inline const std::string& OMAPInsertMessage::_internal_w() const {
  return w_.Get();
}
inline void OMAPInsertMessage::_internal_set_w(const std::string& value) {
  
  w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::_internal_mutable_w() {
  
  return w_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::release_w() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPInsertMessage.w)
  return w_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPInsertMessage::set_allocated_w(std::string* w) {
  if (w != nullptr) {
    
  } else {
    
  }
  w_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), w,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (w_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    w_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPInsertMessage.w)
}

// bytes idorn = 2;
inline void OMAPInsertMessage::clear_idorn() {
  idorn_.ClearToEmpty();
}
inline const std::string& OMAPInsertMessage::idorn() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPInsertMessage.idorn)
  return _internal_idorn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPInsertMessage::set_idorn(ArgT0&& arg0, ArgT... args) {
 
 idorn_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPInsertMessage.idorn)
}
inline std::string* OMAPInsertMessage::mutable_idorn() {
  std::string* _s = _internal_mutable_idorn();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPInsertMessage.idorn)
  return _s;
}
inline const std::string& OMAPInsertMessage::_internal_idorn() const {
  return idorn_.Get();
}
inline void OMAPInsertMessage::_internal_set_idorn(const std::string& value) {
  
  idorn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::_internal_mutable_idorn() {
  
  return idorn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::release_idorn() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPInsertMessage.idorn)
  return idorn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPInsertMessage::set_allocated_idorn(std::string* idorn) {
  if (idorn != nullptr) {
    
  } else {
    
  }
  idorn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idorn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (idorn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    idorn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPInsertMessage.idorn)
}

// uint32 flag = 3;
inline void OMAPInsertMessage::clear_flag() {
  flag_ = 0u;
}
inline uint32_t OMAPInsertMessage::_internal_flag() const {
  return flag_;
}
inline uint32_t OMAPInsertMessage::flag() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPInsertMessage.flag)
  return _internal_flag();
}
inline void OMAPInsertMessage::_internal_set_flag(uint32_t value) {
  
  flag_ = value;
}
inline void OMAPInsertMessage::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:DistSSE.OMAPInsertMessage.flag)
}

// bytes value = 4;
inline void OMAPInsertMessage::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& OMAPInsertMessage::value() const {
  // @@protoc_insertion_point(field_get:DistSSE.OMAPInsertMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OMAPInsertMessage::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.OMAPInsertMessage.value)
}
inline std::string* OMAPInsertMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:DistSSE.OMAPInsertMessage.value)
  return _s;
}
inline const std::string& OMAPInsertMessage::_internal_value() const {
  return value_.Get();
}
inline void OMAPInsertMessage::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OMAPInsertMessage::release_value() {
  // @@protoc_insertion_point(field_release:DistSSE.OMAPInsertMessage.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OMAPInsertMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.OMAPInsertMessage.value)
}

// -------------------------------------------------------------------

// UpdateRequestMessage_Rose_2

// bytes L = 1;
inline void UpdateRequestMessage_Rose_2::clear_l() {
  l_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage_Rose_2::l() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage_Rose_2.L)
  return _internal_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage_Rose_2::set_l(ArgT0&& arg0, ArgT... args) {
 
 l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage_Rose_2.L)
}
inline std::string* UpdateRequestMessage_Rose_2::mutable_l() {
  std::string* _s = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage_Rose_2.L)
  return _s;
}
inline const std::string& UpdateRequestMessage_Rose_2::_internal_l() const {
  return l_.Get();
}
inline void UpdateRequestMessage_Rose_2::_internal_set_l(const std::string& value) {
  
  l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage_Rose_2::_internal_mutable_l() {
  
  return l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage_Rose_2::release_l() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage_Rose_2.L)
  return l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage_Rose_2::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage_Rose_2.L)
}

// bytes C = 2;
inline void UpdateRequestMessage_Rose_2::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage_Rose_2::c() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage_Rose_2.C)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage_Rose_2::set_c(ArgT0&& arg0, ArgT... args) {
 
 c_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage_Rose_2.C)
}
inline std::string* UpdateRequestMessage_Rose_2::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage_Rose_2.C)
  return _s;
}
inline const std::string& UpdateRequestMessage_Rose_2::_internal_c() const {
  return c_.Get();
}
inline void UpdateRequestMessage_Rose_2::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage_Rose_2::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage_Rose_2::release_c() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage_Rose_2.C)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage_Rose_2::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage_Rose_2.C)
}

// -------------------------------------------------------------------

// SearchRequestMessage_Rose_2

// bytes K_u = 1;
inline void SearchRequestMessage_Rose_2::clear_k_u() {
  k_u_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage_Rose_2::k_u() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.K_u)
  return _internal_k_u();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage_Rose_2::set_k_u(ArgT0&& arg0, ArgT... args) {
 
 k_u_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.K_u)
}
inline std::string* SearchRequestMessage_Rose_2::mutable_k_u() {
  std::string* _s = _internal_mutable_k_u();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage_Rose_2.K_u)
  return _s;
}
inline const std::string& SearchRequestMessage_Rose_2::_internal_k_u() const {
  return k_u_.Get();
}
inline void SearchRequestMessage_Rose_2::_internal_set_k_u(const std::string& value) {
  
  k_u_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::_internal_mutable_k_u() {
  
  return k_u_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::release_k_u() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage_Rose_2.K_u)
  return k_u_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage_Rose_2::set_allocated_k_u(std::string* k_u) {
  if (k_u != nullptr) {
    
  } else {
    
  }
  k_u_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k_u,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (k_u_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    k_u_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage_Rose_2.K_u)
}

// bytes delta_k = 2;
inline void SearchRequestMessage_Rose_2::clear_delta_k() {
  delta_k_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage_Rose_2::delta_k() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.delta_k)
  return _internal_delta_k();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage_Rose_2::set_delta_k(ArgT0&& arg0, ArgT... args) {
 
 delta_k_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.delta_k)
}
inline std::string* SearchRequestMessage_Rose_2::mutable_delta_k() {
  std::string* _s = _internal_mutable_delta_k();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage_Rose_2.delta_k)
  return _s;
}
inline const std::string& SearchRequestMessage_Rose_2::_internal_delta_k() const {
  return delta_k_.Get();
}
inline void SearchRequestMessage_Rose_2::_internal_set_delta_k(const std::string& value) {
  
  delta_k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::_internal_mutable_delta_k() {
  
  return delta_k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::release_delta_k() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage_Rose_2.delta_k)
  return delta_k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage_Rose_2::set_allocated_delta_k(std::string* delta_k) {
  if (delta_k != nullptr) {
    
  } else {
    
  }
  delta_k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_k,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delta_k_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delta_k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage_Rose_2.delta_k)
}

// bytes tk = 3;
inline void SearchRequestMessage_Rose_2::clear_tk() {
  tk_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage_Rose_2::tk() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.tk)
  return _internal_tk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage_Rose_2::set_tk(ArgT0&& arg0, ArgT... args) {
 
 tk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.tk)
}
inline std::string* SearchRequestMessage_Rose_2::mutable_tk() {
  std::string* _s = _internal_mutable_tk();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage_Rose_2.tk)
  return _s;
}
inline const std::string& SearchRequestMessage_Rose_2::_internal_tk() const {
  return tk_.Get();
}
inline void SearchRequestMessage_Rose_2::_internal_set_tk(const std::string& value) {
  
  tk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::_internal_mutable_tk() {
  
  return tk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage_Rose_2::release_tk() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage_Rose_2.tk)
  return tk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage_Rose_2::set_allocated_tk(std::string* tk) {
  if (tk != nullptr) {
    
  } else {
    
  }
  tk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage_Rose_2.tk)
}

// uint32 sn = 4;
inline void SearchRequestMessage_Rose_2::clear_sn() {
  sn_ = 0u;
}
inline uint32_t SearchRequestMessage_Rose_2::_internal_sn() const {
  return sn_;
}
inline uint32_t SearchRequestMessage_Rose_2::sn() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.sn)
  return _internal_sn();
}
inline void SearchRequestMessage_Rose_2::_internal_set_sn(uint32_t value) {
  
  sn_ = value;
}
inline void SearchRequestMessage_Rose_2::set_sn(uint32_t value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.sn)
}

// uint32 cnt_d = 5;
inline void SearchRequestMessage_Rose_2::clear_cnt_d() {
  cnt_d_ = 0u;
}
inline uint32_t SearchRequestMessage_Rose_2::_internal_cnt_d() const {
  return cnt_d_;
}
inline uint32_t SearchRequestMessage_Rose_2::cnt_d() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.cnt_d)
  return _internal_cnt_d();
}
inline void SearchRequestMessage_Rose_2::_internal_set_cnt_d(uint32_t value) {
  
  cnt_d_ = value;
}
inline void SearchRequestMessage_Rose_2::set_cnt_d(uint32_t value) {
  _internal_set_cnt_d(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.cnt_d)
}

// uint32 cnt_i = 6;
inline void SearchRequestMessage_Rose_2::clear_cnt_i() {
  cnt_i_ = 0u;
}
inline uint32_t SearchRequestMessage_Rose_2::_internal_cnt_i() const {
  return cnt_i_;
}
inline uint32_t SearchRequestMessage_Rose_2::cnt_i() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage_Rose_2.cnt_i)
  return _internal_cnt_i();
}
inline void SearchRequestMessage_Rose_2::_internal_set_cnt_i(uint32_t value) {
  
  cnt_i_ = value;
}
inline void SearchRequestMessage_Rose_2::set_cnt_i(uint32_t value) {
  _internal_set_cnt_i(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage_Rose_2.cnt_i)
}

// -------------------------------------------------------------------

// SearchReply_Rose_2

// bytes C = 1;
inline void SearchReply_Rose_2::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& SearchReply_Rose_2::c() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchReply_Rose_2.C)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReply_Rose_2::set_c(ArgT0&& arg0, ArgT... args) {
 
 c_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply_Rose_2.C)
}
inline std::string* SearchReply_Rose_2::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchReply_Rose_2.C)
  return _s;
}
inline const std::string& SearchReply_Rose_2::_internal_c() const {
  return c_.Get();
}
inline void SearchReply_Rose_2::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchReply_Rose_2::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchReply_Rose_2::release_c() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchReply_Rose_2.C)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchReply_Rose_2::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchReply_Rose_2.C)
}

// -------------------------------------------------------------------

// SetupRequestMessage

// uint64 setup_size = 1;
inline void SetupRequestMessage::clear_setup_size() {
  setup_size_ = uint64_t{0u};
}
inline uint64_t SetupRequestMessage::_internal_setup_size() const {
  return setup_size_;
}
inline uint64_t SetupRequestMessage::setup_size() const {
  // @@protoc_insertion_point(field_get:DistSSE.SetupRequestMessage.setup_size)
  return _internal_setup_size();
}
inline void SetupRequestMessage::_internal_set_setup_size(uint64_t value) {
  
  setup_size_ = value;
}
inline void SetupRequestMessage::set_setup_size(uint64_t value) {
  _internal_set_setup_size(value);
  // @@protoc_insertion_point(field_set:DistSSE.SetupRequestMessage.setup_size)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes tpd_L = 1;
inline void SearchRequestMessage::clear_tpd_l() {
  tpd_l_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::tpd_l() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.tpd_L)
  return _internal_tpd_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_tpd_l(ArgT0&& arg0, ArgT... args) {
 
 tpd_l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.tpd_L)
}
inline std::string* SearchRequestMessage::mutable_tpd_l() {
  std::string* _s = _internal_mutable_tpd_l();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.tpd_L)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_tpd_l() const {
  return tpd_l_.Get();
}
inline void SearchRequestMessage::_internal_set_tpd_l(const std::string& value) {
  
  tpd_l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_tpd_l() {
  
  return tpd_l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_tpd_l() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.tpd_L)
  return tpd_l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_tpd_l(std::string* tpd_l) {
  if (tpd_l != nullptr) {
    
  } else {
    
  }
  tpd_l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tpd_l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tpd_l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tpd_l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.tpd_L)
}

// bytes tpd_T = 2;
inline void SearchRequestMessage::clear_tpd_t() {
  tpd_t_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::tpd_t() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.tpd_T)
  return _internal_tpd_t();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_tpd_t(ArgT0&& arg0, ArgT... args) {
 
 tpd_t_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.tpd_T)
}
inline std::string* SearchRequestMessage::mutable_tpd_t() {
  std::string* _s = _internal_mutable_tpd_t();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.tpd_T)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_tpd_t() const {
  return tpd_t_.Get();
}
inline void SearchRequestMessage::_internal_set_tpd_t(const std::string& value) {
  
  tpd_t_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_tpd_t() {
  
  return tpd_t_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_tpd_t() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.tpd_T)
  return tpd_t_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_tpd_t(std::string* tpd_t) {
  if (tpd_t != nullptr) {
    
  } else {
    
  }
  tpd_t_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tpd_t,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tpd_t_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tpd_t_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.tpd_T)
}

// bytes L = 3;
inline void SearchRequestMessage::clear_l() {
  l_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::l() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.L)
  return _internal_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_l(ArgT0&& arg0, ArgT... args) {
 
 l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.L)
}
inline std::string* SearchRequestMessage::mutable_l() {
  std::string* _s = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.L)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_l() const {
  return l_.Get();
}
inline void SearchRequestMessage::_internal_set_l(const std::string& value) {
  
  l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_l() {
  
  return l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_l() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.L)
  return l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.L)
}

// bytes R = 4;
inline void SearchRequestMessage::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::r() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.R)
  return _internal_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_r(ArgT0&& arg0, ArgT... args) {
 
 r_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.R)
}
inline std::string* SearchRequestMessage::mutable_r() {
  std::string* _s = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.R)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_r() const {
  return r_.Get();
}
inline void SearchRequestMessage::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_r() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.R)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (r_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.R)
}

// bytes D = 5;
inline void SearchRequestMessage::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::d() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.D)
  return _internal_d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_d(ArgT0&& arg0, ArgT... args) {
 
 d_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.D)
}
inline std::string* SearchRequestMessage::mutable_d() {
  std::string* _s = _internal_mutable_d();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.D)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_d() const {
  return d_.Get();
}
inline void SearchRequestMessage::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_d() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.D)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (d_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.D)
}

// bytes C = 6;
inline void SearchRequestMessage::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::c() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.C)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_c(ArgT0&& arg0, ArgT... args) {
 
 c_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.C)
}
inline std::string* SearchRequestMessage::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.C)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_c() const {
  return c_.Get();
}
inline void SearchRequestMessage::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_c() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.C)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.C)
}

// -------------------------------------------------------------------

// SearchReply

// bytes ind = 1;
inline void SearchReply::clear_ind() {
  ind_.ClearToEmpty();
}
inline const std::string& SearchReply::ind() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchReply.ind)
  return _internal_ind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReply::set_ind(ArgT0&& arg0, ArgT... args) {
 
 ind_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply.ind)
}
inline std::string* SearchReply::mutable_ind() {
  std::string* _s = _internal_mutable_ind();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchReply.ind)
  return _s;
}
inline const std::string& SearchReply::_internal_ind() const {
  return ind_.Get();
}
inline void SearchReply::_internal_set_ind(const std::string& value) {
  
  ind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchReply::_internal_mutable_ind() {
  
  return ind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchReply::release_ind() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchReply.ind)
  return ind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchReply::set_allocated_ind(std::string* ind) {
  if (ind != nullptr) {
    
  } else {
    
  }
  ind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ind,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ind_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchReply.ind)
}

// -------------------------------------------------------------------

// CacheRequestMessage

// bytes tw = 1;
inline void CacheRequestMessage::clear_tw() {
  tw_.ClearToEmpty();
}
inline const std::string& CacheRequestMessage::tw() const {
  // @@protoc_insertion_point(field_get:DistSSE.CacheRequestMessage.tw)
  return _internal_tw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheRequestMessage::set_tw(ArgT0&& arg0, ArgT... args) {
 
 tw_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.CacheRequestMessage.tw)
}
inline std::string* CacheRequestMessage::mutable_tw() {
  std::string* _s = _internal_mutable_tw();
  // @@protoc_insertion_point(field_mutable:DistSSE.CacheRequestMessage.tw)
  return _s;
}
inline const std::string& CacheRequestMessage::_internal_tw() const {
  return tw_.Get();
}
inline void CacheRequestMessage::_internal_set_tw(const std::string& value) {
  
  tw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::_internal_mutable_tw() {
  
  return tw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::release_tw() {
  // @@protoc_insertion_point(field_release:DistSSE.CacheRequestMessage.tw)
  return tw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CacheRequestMessage::set_allocated_tw(std::string* tw) {
  if (tw != nullptr) {
    
  } else {
    
  }
  tw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tw,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tw_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.CacheRequestMessage.tw)
}

// bytes inds = 2;
inline void CacheRequestMessage::clear_inds() {
  inds_.ClearToEmpty();
}
inline const std::string& CacheRequestMessage::inds() const {
  // @@protoc_insertion_point(field_get:DistSSE.CacheRequestMessage.inds)
  return _internal_inds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheRequestMessage::set_inds(ArgT0&& arg0, ArgT... args) {
 
 inds_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.CacheRequestMessage.inds)
}
inline std::string* CacheRequestMessage::mutable_inds() {
  std::string* _s = _internal_mutable_inds();
  // @@protoc_insertion_point(field_mutable:DistSSE.CacheRequestMessage.inds)
  return _s;
}
inline const std::string& CacheRequestMessage::_internal_inds() const {
  return inds_.Get();
}
inline void CacheRequestMessage::_internal_set_inds(const std::string& value) {
  
  inds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::_internal_mutable_inds() {
  
  return inds_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::release_inds() {
  // @@protoc_insertion_point(field_release:DistSSE.CacheRequestMessage.inds)
  return inds_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CacheRequestMessage::set_allocated_inds(std::string* inds) {
  if (inds != nullptr) {
    
  } else {
    
  }
  inds_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inds,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inds_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inds_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.CacheRequestMessage.inds)
}

// -------------------------------------------------------------------

// UpdateRequestMessage

// bytes L = 1;
inline void UpdateRequestMessage::clear_l() {
  l_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::l() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.L)
  return _internal_l();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_l(ArgT0&& arg0, ArgT... args) {
 
 l_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.L)
}
inline std::string* UpdateRequestMessage::mutable_l() {
  std::string* _s = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.L)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_l() const {
  return l_.Get();
}
inline void UpdateRequestMessage::_internal_set_l(const std::string& value) {
  
  l_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_l() {
  
  return l_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_l() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.L)
  return l_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (l_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.L)
}

// bytes R = 2;
inline void UpdateRequestMessage::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::r() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.R)
  return _internal_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_r(ArgT0&& arg0, ArgT... args) {
 
 r_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.R)
}
inline std::string* UpdateRequestMessage::mutable_r() {
  std::string* _s = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.R)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_r() const {
  return r_.Get();
}
inline void UpdateRequestMessage::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_r() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.R)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (r_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    r_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.R)
}

// bytes D = 3;
inline void UpdateRequestMessage::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::d() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.D)
  return _internal_d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_d(ArgT0&& arg0, ArgT... args) {
 
 d_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.D)
}
inline std::string* UpdateRequestMessage::mutable_d() {
  std::string* _s = _internal_mutable_d();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.D)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_d() const {
  return d_.Get();
}
inline void UpdateRequestMessage::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_d() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.D)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (d_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.D)
}

// bytes C = 4;
inline void UpdateRequestMessage::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::c() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.C)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_c(ArgT0&& arg0, ArgT... args) {
 
 c_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.C)
}
inline std::string* UpdateRequestMessage::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.C)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_c() const {
  return c_.Get();
}
inline void UpdateRequestMessage::_internal_set_c(const std::string& value) {
  
  c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_c() {
  
  return c_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_c() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.C)
  return c_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.C)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::_internal_status() const {
  return status_;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:DistSSE.ExecuteStatus.status)
  return _internal_status();
}
inline void ExecuteStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ExecuteStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DistSSE.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DistSSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto
