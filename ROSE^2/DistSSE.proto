syntax = "proto3";

import "google/protobuf/empty.proto";

package DistSSE;

service RPC {

// Setup
rpc setup (SetupRequestMessage) returns ( ExecuteStatus ) {}

// Search
rpc search(SearchRequestMessage) returns (stream SearchReply) {}
rpc search_rose(SearchRequestMessage) returns (stream SearchReply) {}
rpc search_Rose_2(SearchRequestMessage_Rose_2) returns (stream SearchReply_Rose_2){}

// Update
rpc update (UpdateRequestMessage) returns ( ExecuteStatus ) {}
rpc update_Rose_2(UpdateRequestMessage_Rose_2) returns (ExecuteStatus){}

rpc batch_update (stream UpdateRequestMessage) returns ( ExecuteStatus ) {}
rpc batch_update_rose (stream UpdateRequestMessage) returns ( ExecuteStatus ) {}
rpc batch_update_Rose_2 (stream UpdateRequestMessage_Rose_2) returns(ExecuteStatus){}

// only used for experiment simulation
rpc cache (CacheRequestMessage) returns ( ExecuteStatus ) {}
rpc batch_cache (stream CacheRequestMessage) returns ( ExecuteStatus ) {}

//getOMAP
rpc OMAPFind(OMAPFindMessage) returns (OMAPFindReply){}
rpc OMAPInsert(OMAPInsertMessage) returns (ExecuteStatus){}
rpc batchOMAPFind(batchOMAPFindMessage) returns (batchOMAPFindReply){}
rpc batchOMAPInsert(stream OMAPInsertMessage) returns (ExecuteStatus){}

}

message batchOMAPFindMessage{
    bytes w = 1;
    repeated bytes idorn = 2;
    uint32 flag = 3;
}
message batchOMAPFindReply{
    repeated bytes value = 1;
}

message OMAPFindMessage{
    bytes w = 1;
    bytes idorn = 2;
    uint32 flag = 3; // 0 for OD_del, 1 for OD_tree
}
message OMAPFindReply{
    bytes value = 1; 
}
message OMAPInsertMessage{
    bytes w = 1;
    bytes idorn = 2;
    uint32 flag = 3; // 0 for OD_del, 1 for OD_tree
    bytes value = 4;
}


message UpdateRequestMessage_Rose_2{
    bytes L = 1;
    bytes C = 2;
}

message SearchRequestMessage_Rose_2{
    bytes K_u = 1;
    bytes delta_k = 2;
    bytes tk = 3;
    uint32 sn = 4;
    uint32 cnt_d = 5;
    uint32 cnt_i = 6;
}

message SearchReply_Rose_2{
	bytes C = 1;
}

message SetupRequestMessage
{
    uint64 setup_size = 1;
    // bytes public_key = 2;
}

message SearchRequestMessage{
    bytes tpd_L = 1;
    bytes tpd_T = 2;
    bytes L = 3;
    bytes R = 4;
    bytes D = 5;
    bytes C = 6;
}


message SearchReply
{
	bytes ind = 1;
}

message CacheRequestMessage
{
    bytes tw = 1;
    bytes inds = 2;
}

//rose
message UpdateRequestMessage
{
    bytes L = 1;
    bytes R = 2;
    bytes D = 3;
    bytes C = 4;
}

message ExecuteStatus
{
	bool status = 1; 
}
