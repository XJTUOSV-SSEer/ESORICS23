// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistSSE.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DistSSE_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DistSSE_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DistSSE_2eproto;
namespace DistSSE {
class CacheRequestMessage;
struct CacheRequestMessageDefaultTypeInternal;
extern CacheRequestMessageDefaultTypeInternal _CacheRequestMessage_default_instance_;
class ExecuteStatus;
struct ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class ReProofRequestMessage;
struct ReProofRequestMessageDefaultTypeInternal;
extern ReProofRequestMessageDefaultTypeInternal _ReProofRequestMessage_default_instance_;
class SearchReply;
struct SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequestMessage;
struct SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class SetupRequestMessage;
struct SetupRequestMessageDefaultTypeInternal;
extern SetupRequestMessageDefaultTypeInternal _SetupRequestMessage_default_instance_;
class UpdateRequestMessage;
struct UpdateRequestMessageDefaultTypeInternal;
extern UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
}  // namespace DistSSE
PROTOBUF_NAMESPACE_OPEN
template<> ::DistSSE::CacheRequestMessage* Arena::CreateMaybeMessage<::DistSSE::CacheRequestMessage>(Arena*);
template<> ::DistSSE::ExecuteStatus* Arena::CreateMaybeMessage<::DistSSE::ExecuteStatus>(Arena*);
template<> ::DistSSE::ReProofRequestMessage* Arena::CreateMaybeMessage<::DistSSE::ReProofRequestMessage>(Arena*);
template<> ::DistSSE::SearchReply* Arena::CreateMaybeMessage<::DistSSE::SearchReply>(Arena*);
template<> ::DistSSE::SearchRequestMessage* Arena::CreateMaybeMessage<::DistSSE::SearchRequestMessage>(Arena*);
template<> ::DistSSE::SetupRequestMessage* Arena::CreateMaybeMessage<::DistSSE::SetupRequestMessage>(Arena*);
template<> ::DistSSE::UpdateRequestMessage* Arena::CreateMaybeMessage<::DistSSE::UpdateRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DistSSE {

// ===================================================================

class SetupRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SetupRequestMessage) */ {
 public:
  inline SetupRequestMessage() : SetupRequestMessage(nullptr) {}
  ~SetupRequestMessage() override;
  explicit constexpr SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupRequestMessage(const SetupRequestMessage& from);
  SetupRequestMessage(SetupRequestMessage&& from) noexcept
    : SetupRequestMessage() {
    *this = ::std::move(from);
  }

  inline SetupRequestMessage& operator=(const SetupRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequestMessage& operator=(SetupRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SetupRequestMessage*>(
               &_SetupRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetupRequestMessage& a, SetupRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetupRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SetupRequestMessage";
  }
  protected:
  explicit SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetupSizeFieldNumber = 1,
  };
  // uint64 setup_size = 1;
  void clear_setup_size();
  uint64_t setup_size() const;
  void set_setup_size(uint64_t value);
  private:
  uint64_t _internal_setup_size() const;
  void _internal_set_setup_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SetupRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t setup_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchRequestMessage) */ {
 public:
  inline SearchRequestMessage() : SearchRequestMessage(nullptr) {}
  ~SearchRequestMessage() override;
  explicit constexpr SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchRequestMessage";
  }
  protected:
  explicit SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSWFieldNumber = 1,
    kStFieldNumber = 2,
    kC1FieldNumber = 3,
    kC2FieldNumber = 4,
  };
  // bytes s_w = 1;
  void clear_s_w();
  const std::string& s_w() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_w(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_w();
  PROTOBUF_NODISCARD std::string* release_s_w();
  void set_allocated_s_w(std::string* s_w);
  private:
  const std::string& _internal_s_w() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_w(const std::string& value);
  std::string* _internal_mutable_s_w();
  public:

  // bytes st = 2;
  void clear_st();
  const std::string& st() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_st(ArgT0&& arg0, ArgT... args);
  std::string* mutable_st();
  PROTOBUF_NODISCARD std::string* release_st();
  void set_allocated_st(std::string* st);
  private:
  const std::string& _internal_st() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_st(const std::string& value);
  std::string* _internal_mutable_st();
  public:

  // uint32 c1 = 3;
  void clear_c1();
  uint32_t c1() const;
  void set_c1(uint32_t value);
  private:
  uint32_t _internal_c1() const;
  void _internal_set_c1(uint32_t value);
  public:

  // uint32 c2 = 4;
  void clear_c2();
  uint32_t c2() const;
  void set_c2(uint32_t value);
  private:
  uint32_t _internal_c2() const;
  void _internal_set_c2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_w_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr st_;
  uint32_t c1_;
  uint32_t c2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.SearchReply) */ {
 public:
  inline SearchReply() : SearchReply(nullptr) {}
  ~SearchReply() override;
  explicit constexpr SearchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.SearchReply";
  }
  protected:
  explicit SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndFieldNumber = 1,
    kProofFieldNumber = 2,
  };
  // repeated bytes ind = 1;
  int ind_size() const;
  private:
  int _internal_ind_size() const;
  public:
  void clear_ind();
  const std::string& ind(int index) const;
  std::string* mutable_ind(int index);
  void set_ind(int index, const std::string& value);
  void set_ind(int index, std::string&& value);
  void set_ind(int index, const char* value);
  void set_ind(int index, const void* value, size_t size);
  std::string* add_ind();
  void add_ind(const std::string& value);
  void add_ind(std::string&& value);
  void add_ind(const char* value);
  void add_ind(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ind() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ind();
  private:
  const std::string& _internal_ind(int index) const;
  std::string* _internal_add_ind();
  public:

  // repeated bytes proof = 2;
  int proof_size() const;
  private:
  int _internal_proof_size() const;
  public:
  void clear_proof();
  const std::string& proof(int index) const;
  std::string* mutable_proof(int index);
  void set_proof(int index, const std::string& value);
  void set_proof(int index, std::string&& value);
  void set_proof(int index, const char* value);
  void set_proof(int index, const void* value, size_t size);
  std::string* add_proof();
  void add_proof(const std::string& value);
  void add_proof(std::string&& value);
  void add_proof(const char* value);
  void add_proof(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proof() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proof();
  private:
  const std::string& _internal_proof(int index) const;
  std::string* _internal_add_proof();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.SearchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ind_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class CacheRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.CacheRequestMessage) */ {
 public:
  inline CacheRequestMessage() : CacheRequestMessage(nullptr) {}
  ~CacheRequestMessage() override;
  explicit constexpr CacheRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheRequestMessage(const CacheRequestMessage& from);
  CacheRequestMessage(CacheRequestMessage&& from) noexcept
    : CacheRequestMessage() {
    *this = ::std::move(from);
  }

  inline CacheRequestMessage& operator=(const CacheRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheRequestMessage& operator=(CacheRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CacheRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheRequestMessage* internal_default_instance() {
    return reinterpret_cast<const CacheRequestMessage*>(
               &_CacheRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CacheRequestMessage& a, CacheRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CacheRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CacheRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.CacheRequestMessage";
  }
  protected:
  explicit CacheRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTwFieldNumber = 1,
    kIndsFieldNumber = 2,
  };
  // bytes tw = 1;
  void clear_tw();
  const std::string& tw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tw();
  PROTOBUF_NODISCARD std::string* release_tw();
  void set_allocated_tw(std::string* tw);
  private:
  const std::string& _internal_tw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tw(const std::string& value);
  std::string* _internal_mutable_tw();
  public:

  // bytes inds = 2;
  void clear_inds();
  const std::string& inds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inds();
  PROTOBUF_NODISCARD std::string* release_inds();
  void set_allocated_inds(std::string* inds);
  private:
  const std::string& _internal_inds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inds(const std::string& value);
  std::string* _internal_mutable_inds();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.CacheRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.UpdateRequestMessage) */ {
 public:
  inline UpdateRequestMessage() : UpdateRequestMessage(nullptr) {}
  ~UpdateRequestMessage() override;
  explicit constexpr UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequestMessage(const UpdateRequestMessage& from);
  UpdateRequestMessage(UpdateRequestMessage&& from) noexcept
    : UpdateRequestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage& operator=(const UpdateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequestMessage& operator=(UpdateRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage*>(
               &_UpdateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateRequestMessage& a, UpdateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.UpdateRequestMessage";
  }
  protected:
  explicit UpdateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtFieldNumber = 1,
    kEFieldNumber = 2,
    kProofFieldNumber = 3,
    kCounterFieldNumber = 4,
  };
  // bytes ut = 1;
  void clear_ut();
  const std::string& ut() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ut(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ut();
  PROTOBUF_NODISCARD std::string* release_ut();
  void set_allocated_ut(std::string* ut);
  private:
  const std::string& _internal_ut() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ut(const std::string& value);
  std::string* _internal_mutable_ut();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // bytes proof = 3;
  void clear_proof();
  const std::string& proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // uint64 counter = 4;
  void clear_counter();
  uint64_t counter() const;
  void set_counter(uint64_t value);
  private:
  uint64_t _internal_counter() const;
  void _internal_set_counter(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.UpdateRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ut_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  uint64_t counter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class ReProofRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.ReProofRequestMessage) */ {
 public:
  inline ReProofRequestMessage() : ReProofRequestMessage(nullptr) {}
  ~ReProofRequestMessage() override;
  explicit constexpr ReProofRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReProofRequestMessage(const ReProofRequestMessage& from);
  ReProofRequestMessage(ReProofRequestMessage&& from) noexcept
    : ReProofRequestMessage() {
    *this = ::std::move(from);
  }

  inline ReProofRequestMessage& operator=(const ReProofRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReProofRequestMessage& operator=(ReProofRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReProofRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReProofRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ReProofRequestMessage*>(
               &_ReProofRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReProofRequestMessage& a, ReProofRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReProofRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReProofRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReProofRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReProofRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReProofRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReProofRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReProofRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.ReProofRequestMessage";
  }
  protected:
  explicit ReProofRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtFieldNumber = 1,
    kEFieldNumber = 2,
    kProofFieldNumber = 3,
  };
  // bytes ut = 1;
  void clear_ut();
  const std::string& ut() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ut(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ut();
  PROTOBUF_NODISCARD std::string* release_ut();
  void set_allocated_ut(std::string* ut);
  private:
  const std::string& _internal_ut() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ut(const std::string& value);
  std::string* _internal_mutable_ut();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // bytes proof = 3;
  void clear_proof();
  const std::string& proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.ReProofRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ut_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistSSE.ExecuteStatus) */ {
 public:
  inline ExecuteStatus() : ExecuteStatus(nullptr) {}
  ~ExecuteStatus() override;
  explicit constexpr ExecuteStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteStatus(const ExecuteStatus& from);
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistSSE.ExecuteStatus";
  }
  protected:
  explicit ExecuteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DistSSE.ExecuteStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DistSSE_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupRequestMessage

// uint64 setup_size = 1;
inline void SetupRequestMessage::clear_setup_size() {
  setup_size_ = uint64_t{0u};
}
inline uint64_t SetupRequestMessage::_internal_setup_size() const {
  return setup_size_;
}
inline uint64_t SetupRequestMessage::setup_size() const {
  // @@protoc_insertion_point(field_get:DistSSE.SetupRequestMessage.setup_size)
  return _internal_setup_size();
}
inline void SetupRequestMessage::_internal_set_setup_size(uint64_t value) {
  
  setup_size_ = value;
}
inline void SetupRequestMessage::set_setup_size(uint64_t value) {
  _internal_set_setup_size(value);
  // @@protoc_insertion_point(field_set:DistSSE.SetupRequestMessage.setup_size)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes s_w = 1;
inline void SearchRequestMessage::clear_s_w() {
  s_w_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::s_w() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.s_w)
  return _internal_s_w();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_s_w(ArgT0&& arg0, ArgT... args) {
 
 s_w_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.s_w)
}
inline std::string* SearchRequestMessage::mutable_s_w() {
  std::string* _s = _internal_mutable_s_w();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.s_w)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_s_w() const {
  return s_w_.Get();
}
inline void SearchRequestMessage::_internal_set_s_w(const std::string& value) {
  
  s_w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_s_w() {
  
  return s_w_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_s_w() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.s_w)
  return s_w_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_s_w(std::string* s_w) {
  if (s_w != nullptr) {
    
  } else {
    
  }
  s_w_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s_w,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_w_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_w_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.s_w)
}

// bytes st = 2;
inline void SearchRequestMessage::clear_st() {
  st_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::st() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.st)
  return _internal_st();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequestMessage::set_st(ArgT0&& arg0, ArgT... args) {
 
 st_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.st)
}
inline std::string* SearchRequestMessage::mutable_st() {
  std::string* _s = _internal_mutable_st();
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchRequestMessage.st)
  return _s;
}
inline const std::string& SearchRequestMessage::_internal_st() const {
  return st_.Get();
}
inline void SearchRequestMessage::_internal_set_st(const std::string& value) {
  
  st_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::_internal_mutable_st() {
  
  return st_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequestMessage::release_st() {
  // @@protoc_insertion_point(field_release:DistSSE.SearchRequestMessage.st)
  return st_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequestMessage::set_allocated_st(std::string* st) {
  if (st != nullptr) {
    
  } else {
    
  }
  st_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), st,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (st_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    st_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.SearchRequestMessage.st)
}

// uint32 c1 = 3;
inline void SearchRequestMessage::clear_c1() {
  c1_ = 0u;
}
inline uint32_t SearchRequestMessage::_internal_c1() const {
  return c1_;
}
inline uint32_t SearchRequestMessage::c1() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.c1)
  return _internal_c1();
}
inline void SearchRequestMessage::_internal_set_c1(uint32_t value) {
  
  c1_ = value;
}
inline void SearchRequestMessage::set_c1(uint32_t value) {
  _internal_set_c1(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.c1)
}

// uint32 c2 = 4;
inline void SearchRequestMessage::clear_c2() {
  c2_ = 0u;
}
inline uint32_t SearchRequestMessage::_internal_c2() const {
  return c2_;
}
inline uint32_t SearchRequestMessage::c2() const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchRequestMessage.c2)
  return _internal_c2();
}
inline void SearchRequestMessage::_internal_set_c2(uint32_t value) {
  
  c2_ = value;
}
inline void SearchRequestMessage::set_c2(uint32_t value) {
  _internal_set_c2(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchRequestMessage.c2)
}

// -------------------------------------------------------------------

// SearchReply

// repeated bytes ind = 1;
inline int SearchReply::_internal_ind_size() const {
  return ind_.size();
}
inline int SearchReply::ind_size() const {
  return _internal_ind_size();
}
inline void SearchReply::clear_ind() {
  ind_.Clear();
}
inline std::string* SearchReply::add_ind() {
  std::string* _s = _internal_add_ind();
  // @@protoc_insertion_point(field_add_mutable:DistSSE.SearchReply.ind)
  return _s;
}
inline const std::string& SearchReply::_internal_ind(int index) const {
  return ind_.Get(index);
}
inline const std::string& SearchReply::ind(int index) const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchReply.ind)
  return _internal_ind(index);
}
inline std::string* SearchReply::mutable_ind(int index) {
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchReply.ind)
  return ind_.Mutable(index);
}
inline void SearchReply::set_ind(int index, const std::string& value) {
  ind_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply.ind)
}
inline void SearchReply::set_ind(int index, std::string&& value) {
  ind_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply.ind)
}
inline void SearchReply::set_ind(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ind_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DistSSE.SearchReply.ind)
}
inline void SearchReply::set_ind(int index, const void* value, size_t size) {
  ind_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DistSSE.SearchReply.ind)
}
inline std::string* SearchReply::_internal_add_ind() {
  return ind_.Add();
}
inline void SearchReply::add_ind(const std::string& value) {
  ind_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DistSSE.SearchReply.ind)
}
inline void SearchReply::add_ind(std::string&& value) {
  ind_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DistSSE.SearchReply.ind)
}
inline void SearchReply::add_ind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ind_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DistSSE.SearchReply.ind)
}
inline void SearchReply::add_ind(const void* value, size_t size) {
  ind_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DistSSE.SearchReply.ind)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchReply::ind() const {
  // @@protoc_insertion_point(field_list:DistSSE.SearchReply.ind)
  return ind_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchReply::mutable_ind() {
  // @@protoc_insertion_point(field_mutable_list:DistSSE.SearchReply.ind)
  return &ind_;
}

// repeated bytes proof = 2;
inline int SearchReply::_internal_proof_size() const {
  return proof_.size();
}
inline int SearchReply::proof_size() const {
  return _internal_proof_size();
}
inline void SearchReply::clear_proof() {
  proof_.Clear();
}
inline std::string* SearchReply::add_proof() {
  std::string* _s = _internal_add_proof();
  // @@protoc_insertion_point(field_add_mutable:DistSSE.SearchReply.proof)
  return _s;
}
inline const std::string& SearchReply::_internal_proof(int index) const {
  return proof_.Get(index);
}
inline const std::string& SearchReply::proof(int index) const {
  // @@protoc_insertion_point(field_get:DistSSE.SearchReply.proof)
  return _internal_proof(index);
}
inline std::string* SearchReply::mutable_proof(int index) {
  // @@protoc_insertion_point(field_mutable:DistSSE.SearchReply.proof)
  return proof_.Mutable(index);
}
inline void SearchReply::set_proof(int index, const std::string& value) {
  proof_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply.proof)
}
inline void SearchReply::set_proof(int index, std::string&& value) {
  proof_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DistSSE.SearchReply.proof)
}
inline void SearchReply::set_proof(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DistSSE.SearchReply.proof)
}
inline void SearchReply::set_proof(int index, const void* value, size_t size) {
  proof_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DistSSE.SearchReply.proof)
}
inline std::string* SearchReply::_internal_add_proof() {
  return proof_.Add();
}
inline void SearchReply::add_proof(const std::string& value) {
  proof_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DistSSE.SearchReply.proof)
}
inline void SearchReply::add_proof(std::string&& value) {
  proof_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DistSSE.SearchReply.proof)
}
inline void SearchReply::add_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DistSSE.SearchReply.proof)
}
inline void SearchReply::add_proof(const void* value, size_t size) {
  proof_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DistSSE.SearchReply.proof)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchReply::proof() const {
  // @@protoc_insertion_point(field_list:DistSSE.SearchReply.proof)
  return proof_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchReply::mutable_proof() {
  // @@protoc_insertion_point(field_mutable_list:DistSSE.SearchReply.proof)
  return &proof_;
}

// -------------------------------------------------------------------

// CacheRequestMessage

// bytes tw = 1;
inline void CacheRequestMessage::clear_tw() {
  tw_.ClearToEmpty();
}
inline const std::string& CacheRequestMessage::tw() const {
  // @@protoc_insertion_point(field_get:DistSSE.CacheRequestMessage.tw)
  return _internal_tw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheRequestMessage::set_tw(ArgT0&& arg0, ArgT... args) {
 
 tw_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.CacheRequestMessage.tw)
}
inline std::string* CacheRequestMessage::mutable_tw() {
  std::string* _s = _internal_mutable_tw();
  // @@protoc_insertion_point(field_mutable:DistSSE.CacheRequestMessage.tw)
  return _s;
}
inline const std::string& CacheRequestMessage::_internal_tw() const {
  return tw_.Get();
}
inline void CacheRequestMessage::_internal_set_tw(const std::string& value) {
  
  tw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::_internal_mutable_tw() {
  
  return tw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::release_tw() {
  // @@protoc_insertion_point(field_release:DistSSE.CacheRequestMessage.tw)
  return tw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CacheRequestMessage::set_allocated_tw(std::string* tw) {
  if (tw != nullptr) {
    
  } else {
    
  }
  tw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tw,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tw_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.CacheRequestMessage.tw)
}

// bytes inds = 2;
inline void CacheRequestMessage::clear_inds() {
  inds_.ClearToEmpty();
}
inline const std::string& CacheRequestMessage::inds() const {
  // @@protoc_insertion_point(field_get:DistSSE.CacheRequestMessage.inds)
  return _internal_inds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheRequestMessage::set_inds(ArgT0&& arg0, ArgT... args) {
 
 inds_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.CacheRequestMessage.inds)
}
inline std::string* CacheRequestMessage::mutable_inds() {
  std::string* _s = _internal_mutable_inds();
  // @@protoc_insertion_point(field_mutable:DistSSE.CacheRequestMessage.inds)
  return _s;
}
inline const std::string& CacheRequestMessage::_internal_inds() const {
  return inds_.Get();
}
inline void CacheRequestMessage::_internal_set_inds(const std::string& value) {
  
  inds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::_internal_mutable_inds() {
  
  return inds_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CacheRequestMessage::release_inds() {
  // @@protoc_insertion_point(field_release:DistSSE.CacheRequestMessage.inds)
  return inds_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CacheRequestMessage::set_allocated_inds(std::string* inds) {
  if (inds != nullptr) {
    
  } else {
    
  }
  inds_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inds,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inds_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inds_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.CacheRequestMessage.inds)
}

// -------------------------------------------------------------------

// UpdateRequestMessage

// bytes ut = 1;
inline void UpdateRequestMessage::clear_ut() {
  ut_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::ut() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.ut)
  return _internal_ut();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_ut(ArgT0&& arg0, ArgT... args) {
 
 ut_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.ut)
}
inline std::string* UpdateRequestMessage::mutable_ut() {
  std::string* _s = _internal_mutable_ut();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.ut)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_ut() const {
  return ut_.Get();
}
inline void UpdateRequestMessage::_internal_set_ut(const std::string& value) {
  
  ut_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_ut() {
  
  return ut_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_ut() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.ut)
  return ut_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_ut(std::string* ut) {
  if (ut != nullptr) {
    
  } else {
    
  }
  ut_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ut,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ut_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.ut)
}

// bytes e = 2;
inline void UpdateRequestMessage::clear_e() {
  e_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::e() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_e(ArgT0&& arg0, ArgT... args) {
 
 e_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.e)
}
inline std::string* UpdateRequestMessage::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.e)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_e() const {
  return e_.Get();
}
inline void UpdateRequestMessage::_internal_set_e(const std::string& value) {
  
  e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_e() {
  
  return e_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_e() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.e)
  return e_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.e)
}

// bytes proof = 3;
inline void UpdateRequestMessage::clear_proof() {
  proof_.ClearToEmpty();
}
inline const std::string& UpdateRequestMessage::proof() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.proof)
  return _internal_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRequestMessage::set_proof(ArgT0&& arg0, ArgT... args) {
 
 proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.proof)
}
inline std::string* UpdateRequestMessage::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:DistSSE.UpdateRequestMessage.proof)
  return _s;
}
inline const std::string& UpdateRequestMessage::_internal_proof() const {
  return proof_.Get();
}
inline void UpdateRequestMessage::_internal_set_proof(const std::string& value) {
  
  proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::_internal_mutable_proof() {
  
  return proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRequestMessage::release_proof() {
  // @@protoc_insertion_point(field_release:DistSSE.UpdateRequestMessage.proof)
  return proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRequestMessage::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proof_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.UpdateRequestMessage.proof)
}

// uint64 counter = 4;
inline void UpdateRequestMessage::clear_counter() {
  counter_ = uint64_t{0u};
}
inline uint64_t UpdateRequestMessage::_internal_counter() const {
  return counter_;
}
inline uint64_t UpdateRequestMessage::counter() const {
  // @@protoc_insertion_point(field_get:DistSSE.UpdateRequestMessage.counter)
  return _internal_counter();
}
inline void UpdateRequestMessage::_internal_set_counter(uint64_t value) {
  
  counter_ = value;
}
inline void UpdateRequestMessage::set_counter(uint64_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:DistSSE.UpdateRequestMessage.counter)
}

// -------------------------------------------------------------------

// ReProofRequestMessage

// bytes ut = 1;
inline void ReProofRequestMessage::clear_ut() {
  ut_.ClearToEmpty();
}
inline const std::string& ReProofRequestMessage::ut() const {
  // @@protoc_insertion_point(field_get:DistSSE.ReProofRequestMessage.ut)
  return _internal_ut();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReProofRequestMessage::set_ut(ArgT0&& arg0, ArgT... args) {
 
 ut_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.ReProofRequestMessage.ut)
}
inline std::string* ReProofRequestMessage::mutable_ut() {
  std::string* _s = _internal_mutable_ut();
  // @@protoc_insertion_point(field_mutable:DistSSE.ReProofRequestMessage.ut)
  return _s;
}
inline const std::string& ReProofRequestMessage::_internal_ut() const {
  return ut_.Get();
}
inline void ReProofRequestMessage::_internal_set_ut(const std::string& value) {
  
  ut_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::_internal_mutable_ut() {
  
  return ut_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::release_ut() {
  // @@protoc_insertion_point(field_release:DistSSE.ReProofRequestMessage.ut)
  return ut_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReProofRequestMessage::set_allocated_ut(std::string* ut) {
  if (ut != nullptr) {
    
  } else {
    
  }
  ut_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ut,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ut_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.ReProofRequestMessage.ut)
}

// bytes e = 2;
inline void ReProofRequestMessage::clear_e() {
  e_.ClearToEmpty();
}
inline const std::string& ReProofRequestMessage::e() const {
  // @@protoc_insertion_point(field_get:DistSSE.ReProofRequestMessage.e)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReProofRequestMessage::set_e(ArgT0&& arg0, ArgT... args) {
 
 e_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.ReProofRequestMessage.e)
}
inline std::string* ReProofRequestMessage::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:DistSSE.ReProofRequestMessage.e)
  return _s;
}
inline const std::string& ReProofRequestMessage::_internal_e() const {
  return e_.Get();
}
inline void ReProofRequestMessage::_internal_set_e(const std::string& value) {
  
  e_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::_internal_mutable_e() {
  
  return e_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::release_e() {
  // @@protoc_insertion_point(field_release:DistSSE.ReProofRequestMessage.e)
  return e_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReProofRequestMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.ReProofRequestMessage.e)
}

// bytes proof = 3;
inline void ReProofRequestMessage::clear_proof() {
  proof_.ClearToEmpty();
}
inline const std::string& ReProofRequestMessage::proof() const {
  // @@protoc_insertion_point(field_get:DistSSE.ReProofRequestMessage.proof)
  return _internal_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReProofRequestMessage::set_proof(ArgT0&& arg0, ArgT... args) {
 
 proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DistSSE.ReProofRequestMessage.proof)
}
inline std::string* ReProofRequestMessage::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:DistSSE.ReProofRequestMessage.proof)
  return _s;
}
inline const std::string& ReProofRequestMessage::_internal_proof() const {
  return proof_.Get();
}
inline void ReProofRequestMessage::_internal_set_proof(const std::string& value) {
  
  proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::_internal_mutable_proof() {
  
  return proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReProofRequestMessage::release_proof() {
  // @@protoc_insertion_point(field_release:DistSSE.ReProofRequestMessage.proof)
  return proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReProofRequestMessage::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proof_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DistSSE.ReProofRequestMessage.proof)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::_internal_status() const {
  return status_;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:DistSSE.ExecuteStatus.status)
  return _internal_status();
}
inline void ExecuteStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ExecuteStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DistSSE.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DistSSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DistSSE_2eproto
