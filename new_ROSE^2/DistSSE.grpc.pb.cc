// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DistSSE.proto

#include "DistSSE.pb.h"
#include "DistSSE.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace DistSSE {

static const char* RPC_method_names[] = {
  "/DistSSE.RPC/setup",
  "/DistSSE.RPC/search",
  "/DistSSE.RPC/search_rose",
  "/DistSSE.RPC/search_Rose_2",
  "/DistSSE.RPC/update",
  "/DistSSE.RPC/update_Rose_2",
  "/DistSSE.RPC/batch_update",
  "/DistSSE.RPC/batch_update_rose",
  "/DistSSE.RPC/batch_update_Rose_2",
  "/DistSSE.RPC/cache",
  "/DistSSE.RPC/batch_cache",
  "/DistSSE.RPC/OMAPFind",
  "/DistSSE.RPC/OMAPInsert",
  "/DistSSE.RPC/batchOMAPFind",
  "/DistSSE.RPC/batchOMAPInsert",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel, options));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setup_(RPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(RPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_search_rose_(RPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_search_Rose_2_(RPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_update_(RPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_Rose_2_(RPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batch_update_(RPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_batch_update_rose_(RPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_batch_update_Rose_2_(RPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_cache_(RPC_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batch_cache_(RPC_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_OMAPFind_(RPC_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OMAPInsert_(RPC_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batchOMAPFind_(RPC_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batchOMAPInsert_(RPC_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status RPC::Stub::setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setup_, context, request, response);
}

void RPC::Stub::async::setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void RPC::Stub::async::setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::ExecuteStatus, ::DistSSE::SetupRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::DistSSE::SearchReply>* RPC::Stub::searchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), rpcmethod_search_, context, request);
}

void RPC::Stub::async::search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::DistSSE::SearchReply>::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* RPC::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* RPC::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, request, false, nullptr);
}

::grpc::ClientReader< ::DistSSE::SearchReply>* RPC::Stub::search_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), rpcmethod_search_rose_, context, request);
}

void RPC::Stub::async::search_rose(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::DistSSE::SearchReply>::Create(stub_->channel_.get(), stub_->rpcmethod_search_rose_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* RPC::Stub::Asyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_rose_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* RPC::Stub::PrepareAsyncsearch_roseRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_rose_, context, request, false, nullptr);
}

::grpc::ClientReader< ::DistSSE::SearchReply_Rose_2>* RPC::Stub::search_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request) {
  return ::grpc::internal::ClientReaderFactory< ::DistSSE::SearchReply_Rose_2>::Create(channel_.get(), rpcmethod_search_Rose_2_, context, request);
}

void RPC::Stub::async::search_Rose_2(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ClientReadReactor< ::DistSSE::SearchReply_Rose_2>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::DistSSE::SearchReply_Rose_2>::Create(stub_->channel_.get(), stub_->rpcmethod_search_Rose_2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>* RPC::Stub::Asyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply_Rose_2>::Create(channel_.get(), cq, rpcmethod_search_Rose_2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::DistSSE::SearchReply_Rose_2>* RPC::Stub::PrepareAsyncsearch_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DistSSE::SearchReply_Rose_2>::Create(channel_.get(), cq, rpcmethod_search_Rose_2_, context, request, false, nullptr);
}

::grpc::Status RPC::Stub::update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_update_, context, request, response);
}

void RPC::Stub::async::update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void RPC::Stub::async::update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_update_Rose_2_, context, request, response);
}

void RPC::Stub::async::update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_Rose_2_, context, request, response, std::move(f));
}

void RPC::Stub::async::update_Rose_2(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_Rose_2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage_Rose_2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_update_Rose_2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::Asyncupdate_Rose_2Raw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdate_Rose_2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), rpcmethod_batch_update_, context, response);
}

void RPC::Stub::async::batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_batch_update_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::batch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), rpcmethod_batch_update_rose_, context, response);
}

void RPC::Stub::async::batch_update_rose(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_batch_update_rose_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::Asyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_rose_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* RPC::Stub::PrepareAsyncbatch_update_roseRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_rose_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* RPC::Stub::batch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::DistSSE::UpdateRequestMessage_Rose_2>::Create(channel_.get(), rpcmethod_batch_update_Rose_2_, context, response);
}

void RPC::Stub::async::batch_update_Rose_2(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::UpdateRequestMessage_Rose_2>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::DistSSE::UpdateRequestMessage_Rose_2>::Create(stub_->channel_.get(), stub_->rpcmethod_batch_update_Rose_2_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* RPC::Stub::Asyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage_Rose_2>::Create(channel_.get(), cq, rpcmethod_batch_update_Rose_2_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage_Rose_2>* RPC::Stub::PrepareAsyncbatch_update_Rose_2Raw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::UpdateRequestMessage_Rose_2>::Create(channel_.get(), cq, rpcmethod_batch_update_Rose_2_, context, response, false, nullptr);
}

::grpc::Status RPC::Stub::cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cache_, context, request, response);
}

void RPC::Stub::async::cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cache_, context, request, response, std::move(f));
}

void RPC::Stub::async::cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::PrepareAsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::ExecuteStatus, ::DistSSE::CacheRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::AsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>* RPC::Stub::batch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::DistSSE::CacheRequestMessage>::Create(channel_.get(), rpcmethod_batch_cache_, context, response);
}

void RPC::Stub::async::batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::CacheRequestMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::DistSSE::CacheRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_batch_cache_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>* RPC::Stub::Asyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::CacheRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_cache_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>* RPC::Stub::PrepareAsyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::CacheRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_cache_, context, response, false, nullptr);
}

::grpc::Status RPC::Stub::OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::DistSSE::OMAPFindReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OMAPFind_, context, request, response);
}

void RPC::Stub::async::OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OMAPFind_, context, request, response, std::move(f));
}

void RPC::Stub::async::OMAPFind(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OMAPFind_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>* RPC::Stub::PrepareAsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::OMAPFindReply, ::DistSSE::OMAPFindMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OMAPFind_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::OMAPFindReply>* RPC::Stub::AsyncOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOMAPFindRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OMAPInsert_, context, request, response);
}

void RPC::Stub::async::OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OMAPInsert_, context, request, response, std::move(f));
}

void RPC::Stub::async::OMAPInsert(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OMAPInsert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::ExecuteStatus, ::DistSSE::OMAPInsertMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OMAPInsert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* RPC::Stub::AsyncOMAPInsertRaw(::grpc::ClientContext* context, const ::DistSSE::OMAPInsertMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOMAPInsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::DistSSE::batchOMAPFindReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_batchOMAPFind_, context, request, response);
}

void RPC::Stub::async::batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batchOMAPFind_, context, request, response, std::move(f));
}

void RPC::Stub::async::batchOMAPFind(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batchOMAPFind_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>* RPC::Stub::PrepareAsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DistSSE::batchOMAPFindReply, ::DistSSE::batchOMAPFindMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_batchOMAPFind_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DistSSE::batchOMAPFindReply>* RPC::Stub::AsyncbatchOMAPFindRaw(::grpc::ClientContext* context, const ::DistSSE::batchOMAPFindMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbatchOMAPFindRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::DistSSE::OMAPInsertMessage>* RPC::Stub::batchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::DistSSE::OMAPInsertMessage>::Create(channel_.get(), rpcmethod_batchOMAPInsert_, context, response);
}

void RPC::Stub::async::batchOMAPInsert(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::DistSSE::OMAPInsertMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::DistSSE::OMAPInsertMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_batchOMAPInsert_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>* RPC::Stub::AsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::OMAPInsertMessage>::Create(channel_.get(), cq, rpcmethod_batchOMAPInsert_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::DistSSE::OMAPInsertMessage>* RPC::Stub::PrepareAsyncbatchOMAPInsertRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::DistSSE::OMAPInsertMessage>::Create(channel_.get(), cq, rpcmethod_batchOMAPInsert_, context, response, false, nullptr);
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::SetupRequestMessage* req,
             ::DistSSE::ExecuteStatus* resp) {
               return service->setup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RPC::Service, ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::SearchRequestMessage* req,
             ::grpc::ServerWriter<::DistSSE::SearchReply>* writer) {
               return service->search(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RPC::Service, ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::SearchRequestMessage* req,
             ::grpc::ServerWriter<::DistSSE::SearchReply>* writer) {
               return service->search_rose(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RPC::Service, ::DistSSE::SearchRequestMessage_Rose_2, ::DistSSE::SearchReply_Rose_2>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::SearchRequestMessage_Rose_2* req,
             ::grpc::ServerWriter<::DistSSE::SearchReply_Rose_2>* writer) {
               return service->search_Rose_2(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::UpdateRequestMessage* req,
             ::DistSSE::ExecuteStatus* resp) {
               return service->update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::UpdateRequestMessage_Rose_2* req,
             ::DistSSE::ExecuteStatus* resp) {
               return service->update_Rose_2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[6],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::DistSSE::UpdateRequestMessage>* reader,
             ::DistSSE::ExecuteStatus* resp) {
               return service->batch_update(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[7],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::DistSSE::UpdateRequestMessage>* reader,
             ::DistSSE::ExecuteStatus* resp) {
               return service->batch_update_rose(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[8],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::DistSSE::UpdateRequestMessage_Rose_2, ::DistSSE::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::DistSSE::UpdateRequestMessage_Rose_2>* reader,
             ::DistSSE::ExecuteStatus* resp) {
               return service->batch_update_Rose_2(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::CacheRequestMessage* req,
             ::DistSSE::ExecuteStatus* resp) {
               return service->cache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[10],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::DistSSE::CacheRequestMessage>* reader,
             ::DistSSE::ExecuteStatus* resp) {
               return service->batch_cache(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::OMAPFindMessage, ::DistSSE::OMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::OMAPFindMessage* req,
             ::DistSSE::OMAPFindReply* resp) {
               return service->OMAPFind(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::OMAPInsertMessage* req,
             ::DistSSE::ExecuteStatus* resp) {
               return service->OMAPInsert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DistSSE::batchOMAPFindMessage, ::DistSSE::batchOMAPFindReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DistSSE::batchOMAPFindMessage* req,
             ::DistSSE::batchOMAPFindReply* resp) {
               return service->batchOMAPFind(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[14],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::DistSSE::OMAPInsertMessage, ::DistSSE::ExecuteStatus>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::DistSSE::OMAPInsertMessage>* reader,
             ::DistSSE::ExecuteStatus* resp) {
               return service->batchOMAPInsert(ctx, reader, resp);
             }, this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::search_rose(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::search_Rose_2(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage_Rose_2* request, ::grpc::ServerWriter< ::DistSSE::SearchReply_Rose_2>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::update_Rose_2(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage_Rose_2* request, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batch_update_rose(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batch_update_Rose_2(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage_Rose_2>* reader, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batch_cache(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::OMAPFind(::grpc::ServerContext* context, const ::DistSSE::OMAPFindMessage* request, ::DistSSE::OMAPFindReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::OMAPInsert(::grpc::ServerContext* context, const ::DistSSE::OMAPInsertMessage* request, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batchOMAPFind(::grpc::ServerContext* context, const ::DistSSE::batchOMAPFindMessage* request, ::DistSSE::batchOMAPFindReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batchOMAPInsert(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::OMAPInsertMessage>* reader, ::DistSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace DistSSE

